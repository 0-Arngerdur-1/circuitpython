# C/C++ with GCC
# Build your C/C++ project with GCC using make.
# Add steps that publish test results, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/c-cpp/gcc

trigger:
- azure-pipelines

jobs:
-   job: BuildARM
    pool:
      vmImage: 'Ubuntu-16.04'
    strategy:
        matrix:
            trinket_m0:
                TRAVIS_BOARDS: 'trinket_m0'
            feather_m0_express:
                TRAVIS_BOARDS: 'feather_m0_express'

    steps:
    - checkout: self
      submodules: recursive
    - bash: |
        wget https://s3.amazonaws.com/adafruit-circuit-python/gcc-arm-embedded_7-2018q2-1~xenial1_amd64.deb
        sudo dpkg -i gcc-arm-embedded*_amd64.deb
      displayName: 'Install ARM GCC'
    - bash: |
        sudo apt-get install gettext
      displayName: 'Install deps'
    - bash: |
        gcc --version
        arm-none-eabi-gcc --version
        python3 --version
      displayName: 'Print versions'
    - bash: |
        make -C mpy-cross -j2
      displayName: 'Build mpy-cross'
    - bash: |
        python3 -u build_release_files.py
      displayName: 'Build board'
      workingDirectory: 'tools'

#   # Use unbuffered output because building all the releases can take a long time.
#   # Travis will cancel the job if it sees no output for >10 minutes.
#   - cd tools &&
#   - cd ..

# before_script:
#   # Expand the git tree back to 4.0.0-alpha.1 and then fetch the latest tag.
#   - LAST_TAG=`git ls-remote --quiet --tags --sort=version:refname | egrep -o "refs/tags/[0-9]+.*\$" | tail -n 1`
#   - git fetch --depth 1 origin $LAST_TAG:$LAST_TAG
#   - git describe --dirty --always --tags
#   - function var_search () { case "$1" in *$2*) true;; *) false;; esac; }
#   - sudo dpkg --add-architecture i386
#
#
#   - (! var_search "${TRAVIS_SDK-}" arm || ())
#
#   # For huzzah builds
#   - (! var_search "${TRAVIS_SDK-}" esp8266 || (wget https://github.com/jepler/esp-open-sdk/releases/download/2018-06-10/xtensa-lx106-elf-standalone.tar.gz && tar -C .. -xaf xtensa-lx106-elf-standalone.tar.gz))
#   - if var_search "${TRAVIS_SDK-}" esp8266 ; then PATH=$(readlink -f ../xtensa-lx106-elf/bin):$PATH; fi
#
#   # For coverage testing (upgrade is used to get latest urllib3 version)
#   - sudo apt-get install -y python3-pip
#   - pip3 install --user sh click
#   - ([[ -z "$TRAVIS_TESTS" ]] || sudo pip install --upgrade cpp-coveralls)
#   - (! var_search "${TRAVIS_TESTS-}" docs || pip install --user Sphinx sphinx-rtd-theme recommonmark)
#   - (! var_search "${TRAVIS_TESTS-}" translations || pip3 install --user polib)
#
#   # report some good version numbers to the build
#   - gcc --version
#   - (! var_search "${TRAVIS_SDK-}" arm || arm-none-eabi-gcc --version)
#   - (! var_search "${TRAVIS_SDK-}" esp8266 || xtensa-lx106-elf-gcc --version)
#   - python3 --version
#
# script:
#   # Build mpy-cross first because other builds depend on it.
#   - echo 'Building mpy-cross' && echo 'travis_fold:start:mpy-cross'
#   - make -C mpy-cross -j2 ; S=$? ; echo $S > status ; (exit $S)
#   - echo 'travis_fold:end:mpy-cross' && tools/print_status.py status
#
#   # Use unbuffered output because building all the releases can take a long time.
#   # Travis will cancel the job if it sees no output for >10 minutes.
#   - cd tools && python3 -u build_release_files.py
#   - cd ..
#
#   - echo 'Building unix' && echo 'travis_fold:start:unix'
#   - (! var_search "${TRAVIS_TESTS-}" unix || (make -C ports/unix deplibs -j2 && make -C ports/unix -j2 && make -C ports/unix coverage -j2)) ; S=$? ; echo $S > status ; (exit $S)
#   - echo 'travis_fold:end:unix' && tools/print_status.py status
#
#   # run tests without coverage info
#   #- (cd tests && MICROPY_CPYTHON3=python3.4 ./run-tests -j1)
#   #- (cd tests && MICROPY_CPYTHON3=python3.4 ./run-tests -j1 --emit native)
#
#   # run tests with coverage info
#   - echo 'Test all' && echo 'travis_fold:start:test_all'
#   - (! var_search "${TRAVIS_TESTS-}" unix || (cd tests && MICROPY_CPYTHON3=python3.5 MICROPY_MICROPYTHON=../ports/unix/micropython_coverage ./run-tests -j1)) ; S=$? ; echo $S > status ; (exit $S)
#   - echo 'travis_fold:end:test_all' && tools/print_status.py status
#
#   - echo 'Test threads' && echo 'travis_fold:start:test_threads'
#   - (! var_search "${TRAVIS_TESTS-}" unix || (cd tests && MICROPY_CPYTHON3=python3.5 MICROPY_MICROPYTHON=../ports/unix/micropython_coverage ./run-tests -j1 -d thread)) ; S=$? ; echo $S > status ; (exit $S)
#   - echo 'travis_fold:end:test_threads' && tools/print_status.py status
#
#   - echo 'Testing with native' && echo 'travis_fold:start:test_native'
#   - (! var_search "${TRAVIS_TESTS-}" unix || (cd tests && MICROPY_CPYTHON3=python3.5 MICROPY_MICROPYTHON=../ports/unix/micropython_coverage ./run-tests -j1 --emit native)) ; S=$? ; echo $S > status ; (exit $S)
#   - echo 'travis_fold:end:test_native' && tools/print_status.py status
#
#   - (echo 'Testing with mpy' && echo 'travis_fold:start:test_mpy')
#   - (! var_search "${TRAVIS_TESTS-}" unix || (cd tests && MICROPY_CPYTHON3=python3.5 MICROPY_MICROPYTHON=../ports/unix/micropython_coverage ./run-tests -j1 --via-mpy -d basics float)) ; S=$? ; echo $S > status ; (exit $S)
#   - echo 'travis_fold:end:test_mpy' && tools/print_status.py status
#
#   - (echo 'Building docs' && echo 'travis_fold:start:build_docs')
#   - (! var_search "${TRAVIS_TESTS-}" docs || sphinx-build -E -W -b html . _build/html) ; S=$? ; echo $S > status ; (exit $S)
#   - echo 'travis_fold:end:build_docs' && tools/print_status.py status
#
#   - (echo 'Building translations' && echo 'travis_fold:start:build_translations')
#   - (! var_search "${TRAVIS_TESTS-}" translations || make check-translate) ; S=$? ; echo $S > status ; (exit $S)
#   - echo 'travis_fold:end:build_translations' && tools/print_status.py status
#
#   # run coveralls coverage analysis (try to, even if some builds/tests failed)
#   #- (cd ports/unix && coveralls --root ../.. --build-root . --gcov $(which gcov) --gcov-options '\-o build-coverage/' --include py --include extmod)
#
#   - (! var_search "${TRAVIS_TESTS-}" website || (cd tools && python3 build_board_info.py && cd ..))
#
# after_failure:
#   - (cd tests && for exp in *.exp; do testbase=$(basename $exp .exp); echo -e "\nFAILURE $testbase"; diff -u $testbase.exp $testbase.out; done)
