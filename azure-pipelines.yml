# C/C++ with GCC
# Build your C/C++ project with GCC using make.
# Add steps that publish test results, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/c-cpp/gcc

trigger:
- azure-pipelines

jobs:
-   job: BuildARM
    pool:
      vmImage: 'Ubuntu-16.04'
    strategy:
        matrix:
            adafruit_samd_m0_boards:
                TRAVIS_BOARDS: 'trinket_m0 pirkey_m0 gemma_m0'
            samd_m0_boards:
                TRAVIS_BOARDS: 'sparkfun_lumidrive meowmeow uchip arduino_zero arduino_mkr1300 arduino_mkrzero pewpew10  sparkfun_samd21_mini sparkfun_samd21_dev catwan_usbstick'
            feather_samd_m0_boards:
                TRAVIS_BOARDS: 'feather_radiofruit_zigbee feather_m0_rfm69 feather_m0_rfm9x feather_m0_adalogger feather_m0_basic'
            samd_m0_express_boards:
                TRAVIS_BOARDS: 'circuitplayground_express_crickit circuitplayground_express metro_m0_express sparkfun_redboard_turbo hallowing_m0_express itsybitsy_m0_express feather_m0_express_crickit feather_m0_express'
            nrf_boards:
                TRAVIS_BOARDS: 'pca10056 pca10059 makerdiary_nrf52840_mdk makerdiary_nrf52840_mdk_usb_dongle particle_boron particle_argon particle_xenon sparkfun_nrf52840_mini'
            nrf_express_boards:
                TRAVIS_BOARDS: 'feather_nrf52840_express'
            samd_m4_boards:
                TRAVIS_BOARDS: 'mini_sam_m4'
            samd_m4_express_boards:
                TRAVIS_BOARDS: 'grandcentral_m4_express metro_m4_express  trellis_m4_express pybadge sam32 itsybitsy_m4_express feather_m4_express pyportal'

    steps:
    - checkout: self
      submodules: recursive
    - bash: |
        wget https://s3.amazonaws.com/adafruit-circuit-python/gcc-arm-embedded_7-2018q2-1~xenial1_amd64.deb
        sudo dpkg -i gcc-arm-embedded*_amd64.deb
      displayName: 'Install ARM GCC'
    - bash: |
        sudo apt-get install gettext
      displayName: 'Install native deps'
    - bash: |
        sudo apt-get install -y python3-pip
        pip3 install --user sh click
      displayName: 'Install python deps'
    - bash: |
        gcc --version
        arm-none-eabi-gcc --version
        python3 --version
      displayName: 'Print versions'
    - bash: |
        make -C mpy-cross -j2
      displayName: 'Build mpy-cross'
    - bash: |
        python3 -u build_release_files.py
      displayName: 'Build board'
      workingDirectory: 'tools'
- job: Test
  pool:
    vmImage: 'Ubuntu-16.04'
  steps:
  - checkout: self
    submodules: recursive
  # - bash: |
  #     wget https://s3.amazonaws.com/adafruit-circuit-python/gcc-arm-embedded_7-2018q2-1~xenial1_amd64.deb
  #     sudo dpkg -i gcc-arm-embedded*_amd64.deb
  #   displayName: 'Install ARM GCC'
  - bash: |
      sudo apt-get install gettext
    displayName: 'Install native deps'
  - bash: |
      sudo apt-get install -y python3-pip
      pip3 install --user sh click Sphinx sphinx-rtd-theme recommonmark polib
      pip3 install --upgrade --user cpp-coveralls
    displayName: 'Install python deps'
  - bash: |
      gcc --version
      arm-none-eabi-gcc --version
      python3 --version
    displayName: 'Print versions'
  - bash: |
      make -C mpy-cross -j2
    displayName: 'Build mpy-cross'
  - bash: |
      make -C ports/unix deplibs -j2
      make -C ports/unix -j2
      make -C ports/unix coverage -j2
    displayName: 'Build unix'
    workingDirectory: 'tools'
  - bash: |
      MICROPY_CPYTHON3=python3.5 MICROPY_MICROPYTHON=../ports/unix/micropython_coverage ./run-tests -j1
    displayName: 'Test all'
    workingDirectory: 'tests'
  - bash: |
      MICROPY_CPYTHON3=python3.5 MICROPY_MICROPYTHON=../ports/unix/micropython_coverage ./run-tests -j1 -d thread
    displayName: 'Test threads'
    workingDirectory: 'tests'

#
#   - echo 'Testing with native' && echo 'travis_fold:start:test_native'
#   - (! var_search "${TRAVIS_TESTS-}" unix || (cd tests && MICROPY_CPYTHON3=python3.5 MICROPY_MICROPYTHON=../ports/unix/micropython_coverage ./run-tests -j1 --emit native)) ; S=$? ; echo $S > status ; (exit $S)
#   - echo 'travis_fold:end:test_native' && tools/print_status.py status
#
#   - (echo 'Testing with mpy' && echo 'travis_fold:start:test_mpy')
#   - (! var_search "${TRAVIS_TESTS-}" unix || (cd tests && MICROPY_CPYTHON3=python3.5 MICROPY_MICROPYTHON=../ports/unix/micropython_coverage ./run-tests -j1 --via-mpy -d basics float)) ; S=$? ; echo $S > status ; (exit $S)
#   - echo 'travis_fold:end:test_mpy' && tools/print_status.py status
#
#   - (echo 'Building docs' && echo 'travis_fold:start:build_docs')
#   - (! var_search "${TRAVIS_TESTS-}" docs || sphinx-build -E -W -b html . _build/html) ; S=$? ; echo $S > status ; (exit $S)
#   - echo 'travis_fold:end:build_docs' && tools/print_status.py status
#
#   - (echo 'Building translations' && echo 'travis_fold:start:build_translations')
#   - (! var_search "${TRAVIS_TESTS-}" translations || make check-translate) ; S=$? ; echo $S > status ; (exit $S)
#   - echo 'travis_fold:end:build_translations' && tools/print_status.py status
#
#   # run coveralls coverage analysis (try to, even if some builds/tests failed)
#   #- (cd ports/unix && coveralls --root ../.. --build-root . --gcov $(which gcov) --gcov-options '\-o build-coverage/' --include py --include extmod)
#
#   - (! var_search "${TRAVIS_TESTS-}" website || (cd tools && python3 build_board_info.py && cd ..))
#
# after_failure:
#   - (cd tests && for exp in *.exp; do testbase=$(basename $exp .exp); echo -e "\nFAILURE $testbase"; diff -u $testbase.exp $testbase.out; done)
