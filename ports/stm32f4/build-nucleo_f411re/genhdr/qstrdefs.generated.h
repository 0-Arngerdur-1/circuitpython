// 32   1093 000 0
// 97 a 550 0010 2
// 101 e 1085 0011 3
// 105 i 608 0100 4
// 110 n 677 0101 5
// 111 o 717 0110 6
// 114 r 680 0111 7
// 115 s 560 1000 8
// 116 t 877 1001 9
// 95 _ 330 10100 20
// 99 c 360 10101 21
// 100 d 371 10110 22
// 108 l 358 10111 23
// 112 p 281 11000 24
// 117 u 337 11001 25
// 98 b 163 110100 52
// 102 f 205 110101 53
// 103 g 176 110110 54
// 109 m 265 110111 55
// 37 % 72 1110000 112
// 39 \' 113 1110001 113
// 69 E 74 1110010 114
// 104 h 140 1110011 115
// 118 v 85 1110100 116
// 119 w 75 1110101 117
// 120 x 78 1110110 118
// 121 y 135 1110111 119
// 46 . 43 11110000 240
// 78 N 37 11110001 241
// 106 j 42 11110010 242
// 107 k 54 11110011 243
// 113 q 39 11110100 244
// 10 \n 33 111101010 490
// 13 \r 32 111101011 491
// 40 ( 27 111101100 492
// 41 ) 27 111101101 493
// 45 - 25 111101110 494
// 47 / 22 111101111 495
// 65 A 19 111110000 496
// 67 C 25 111110001 497
// 73 I 34 111110010 498
// 79 O 28 111110011 499
// 80 P 30 111110100 500
// 82 R 24 111110101 501
// 83 S 25 111110110 502
// 84 T 24 111110111 503
// 44 , 12 1111110000 1008
// 58 : 13 1111110001 1009
// 66 B 12 1111110010 1010
// 68 D 14 1111110011 1011
// 70 F 10 1111110100 1012
// 76 L 12 1111110101 1013
// 77 M 10 1111110110 1014
// 85 U 18 1111110111 1015
// 122 z 11 1111111000 1016
// 42 * 9 11111110010 2034
// 48 0 8 11111110011 2035
// 49 1 5 11111110100 2036
// 60 < 9 11111110101 2037
// 62 > 9 11111110110 2038
// 71 G 6 11111110111 2039
// 86 V 5 11111111000 2040
// 89 Y 7 11111111001 2041
// 33 ! 4 111111110100 4084
// 34 \" 4 111111110101 4085
// 35 # 4 111111110110 4086
// 50 2 4 111111110111 4087
// 51 3 3 111111111000 4088
// 61 = 4 111111111001 4089
// 72 H 5 111111111010 4090
// 87 W 5 111111111011 4091
// 96 ` 4 111111111100 4092
// 75 K 2 1111111111010 8186
// 123 { 2 1111111111011 8187
// 125 } 2 1111111111100 8188
// 54 6 1 11111111111010 16378
// 56 8 1 11111111111011 16379
// 74 J 1 11111111111100 16380
// 88 X 1 11111111111101 16381
// 90 Z 1 11111111111110 16382
// 59 ; 1 111111111111110 32766
// 64 @ 0 11111111111111100 131068
// 128 ¬Ä 0 11111111111111101 131069
// 130 ¬Ç 0 111111111111111100 262140
// 132 ¬Ñ 0 111111111111111101 262141
// 15  0 1111111111111111100 524284
// 133 ¬Ö 0 1111111111111111101 524285
// 134 ¬Ü 0 11111111111111111100 1048572
// 136 ¬à 0 11111111111111111101 1048573
// 137 ¬â 0 111111111111111111100 2097148
// 138 ¬ä 0 111111111111111111101 2097149
// 7 \a 0 1111111111111111111100 4194300
// 16  0 1111111111111111111101 4194301
// 140 ¬å 0 1111111111111111111110 4194302
// 141 ¬ç 0 11111111111111111111110 8388606
// 142 ¬é 0 111111111111111111111110 16777214
// 144 ¬ê 0 1111111111111111111111110 33554430
// 145 ¬ë 0 11111111111111111111111110 67108862
// 146 ¬í 0 111111111111111111111111110 134217726
// 148 ¬î 0 1111111111111111111111111110 268435454
// 36 $ 0 11111111111111111111111111110 536870910
// 149 ¬ï 0 111111111111111111111111111110 1073741822
// 150 ¬ñ 0 1111111111111111111111111111110 2147483646
// 152 ¬ò 0 11111111111111111111111111111110 4294967294
// 153 ¬ô 0 111111111111111111111111111111110 8589934590
// 154 ¬ö 0 1111111111111111111111111111111110 17179869182
// 156 ¬ú 0 11111111111111111111111111111111110 34359738366
// 8 \b 0 111111111111111111111111111111111110 68719476734
// 18  0 1111111111111111111111111111111111110 137438953470
// 38 & 0 11111111111111111111111111111111111110 274877906942
// 157 ¬ù 0 111111111111111111111111111111111111110 549755813886
// 158 ¬û 0 1111111111111111111111111111111111111110 1099511627774
// 160 ¬† 0 11111111111111111111111111111111111111110 2199023255550
// 161 ¬° 0 111111111111111111111111111111111111111110 4398046511102
// 162 ¬¢ 0 1111111111111111111111111111111111111111110 8796093022206
// 164 ¬§ 0 11111111111111111111111111111111111111111110 17592186044414
// 19  0 111111111111111111111111111111111111111111110 35184372088830
// 165 ¬• 0 1111111111111111111111111111111111111111111110 70368744177662
// 166 ¬¶ 0 11111111111111111111111111111111111111111111110 140737488355326
// 168 ¬® 0 111111111111111111111111111111111111111111111110 281474976710654
// 131 ¬É 0 11111111111111111111111111111111111111111111111100 1125899906842620
// 255 √ø 0 11111111111111111111111111111111111111111111111101 1125899906842621
// 135 ¬á 0 111111111111111111111111111111111111111111111111100 2251799813685244
// 63 ? 0 1111111111111111111111111111111111111111111111111010 4503599627370490
// 169 ¬© 0 1111111111111111111111111111111111111111111111111011 4503599627370491
// 9 \t 0 11111111111111111111111111111111111111111111111111000 9007199254740984
// 177 ¬± 0 11111111111111111111111111111111111111111111111111001 9007199254740985
// 178 ¬≤ 0 11111111111111111111111111111111111111111111111111010 9007199254740986
// 21  0 111111111111111111111111111111111111111111111111110110 18014398509481974
// 129 ¬Å 0 111111111111111111111111111111111111111111111111110111 18014398509481975
// 139 ¬ã 0 111111111111111111111111111111111111111111111111111000 18014398509481976
// 170 ¬™ 0 111111111111111111111111111111111111111111111111111001 18014398509481977
// 181 ¬µ 0 111111111111111111111111111111111111111111111111111010 18014398509481978
// 182 ¬∂ 0 111111111111111111111111111111111111111111111111111011 18014398509481979
// 17  0 1111111111111111111111111111111111111111111111111111000 36028797018963960
// 20  0 1111111111111111111111111111111111111111111111111111001 36028797018963961
// 31  0 1111111111111111111111111111111111111111111111111111010 36028797018963962
// 143 ¬è 0 1111111111111111111111111111111111111111111111111111011 36028797018963963
// 173 ¬≠ 0 1111111111111111111111111111111111111111111111111111100 36028797018963964
// 147 ¬ì 0 11111111111111111111111111111111111111111111111111111010 72057594037927930
// 172 ¬¨ 0 11111111111111111111111111111111111111111111111111111011 72057594037927931
// 186 ¬∫ 0 11111111111111111111111111111111111111111111111111111100 72057594037927932
// 1  0 111111111111111111111111111111111111111111111111111111010 144115188075855866
// 151 ¬ó 0 111111111111111111111111111111111111111111111111111111011 144115188075855867
// 174 ¬Æ 0 111111111111111111111111111111111111111111111111111111100 144115188075855868
// 155 ¬õ 0 1111111111111111111111111111111111111111111111111111111010 288230376151711738
// 159 ¬ü 0 1111111111111111111111111111111111111111111111111111111011 288230376151711739
// 176 ¬∞ 0 1111111111111111111111111111111111111111111111111111111100 288230376151711740
// 4  0 11111111111111111111111111111111111111111111111111111111010 576460752303423482
// 22  0 11111111111111111111111111111111111111111111111111111111011 576460752303423483
// 163 ¬£ 0 11111111111111111111111111111111111111111111111111111111100 576460752303423484
// 180 ¬¥ 0 11111111111111111111111111111111111111111111111111111111101 576460752303423485
// 167 ¬ß 0 111111111111111111111111111111111111111111111111111111111100 1152921504606846972
// 92 \ 0 1111111111111111111111111111111111111111111111111111111111010 2305843009213693946
// 171 ¬´ 0 1111111111111111111111111111111111111111111111111111111111011 2305843009213693947
// 184 ¬∏ 0 1111111111111111111111111111111111111111111111111111111111100 2305843009213693948
// 3  0 11111111111111111111111111111111111111111111111111111111111010 4611686018427387898
// 188 ¬º 0 11111111111111111111111111111111111111111111111111111111111011 4611686018427387899
// 94 ^ 0 111111111111111111111111111111111111111111111111111111111111000 9223372036854775800
// 179 ¬≥ 0 111111111111111111111111111111111111111111111111111111111111001 9223372036854775801
// 189 ¬Ω 0 111111111111111111111111111111111111111111111111111111111111010 9223372036854775802
// 190 ¬æ 0 111111111111111111111111111111111111111111111111111111111111011 9223372036854775803
// 200 √à 0 111111111111111111111111111111111111111111111111111111111111100 9223372036854775804
// 183 ¬∑ 0 1111111111111111111111111111111111111111111111111111111111111010 18446744073709551610
// 204 √å 0 1111111111111111111111111111111111111111111111111111111111111011 18446744073709551611
// 11 \v 0 11111111111111111111111111111111111111111111111111111111111111000 36893488147419103224
// 24  0 11111111111111111111111111111111111111111111111111111111111111001 36893488147419103225
// 81 Q 0 11111111111111111111111111111111111111111111111111111111111111010 36893488147419103226
// 205 √ç 0 11111111111111111111111111111111111111111111111111111111111111011 36893488147419103227
// 93 ] 0 111111111111111111111111111111111111111111111111111111111111111000 73786976294838206456
// 192 √Ä 0 111111111111111111111111111111111111111111111111111111111111111001 73786976294838206457
// 193 √Å 0 111111111111111111111111111111111111111111111111111111111111111010 73786976294838206458
// 194 √Ç 0 111111111111111111111111111111111111111111111111111111111111111011 73786976294838206459
// 23  0 1111111111111111111111111111111111111111111111111111111111111111000 147573952589676412920
// 196 √Ñ 0 1111111111111111111111111111111111111111111111111111111111111111001 147573952589676412921
// 197 √Ö 0 1111111111111111111111111111111111111111111111111111111111111111010 147573952589676412922
// 198 √Ü 0 1111111111111111111111111111111111111111111111111111111111111111011 147573952589676412923
// 208 √ê 0 1111111111111111111111111111111111111111111111111111111111111111100 147573952589676412924
// 43 + 0 11111111111111111111111111111111111111111111111111111111111111111010 295147905179352825850
// 175 ¬Ø 0 11111111111111111111111111111111111111111111111111111111111111111011 295147905179352825851
// 212 √î 0 11111111111111111111111111111111111111111111111111111111111111111100 295147905179352825852
// 201 √â 0 111111111111111111111111111111111111111111111111111111111111111111010 590295810358705651706
// 202 √ä 0 111111111111111111111111111111111111111111111111111111111111111111011 590295810358705651707
// 91 [ 0 1111111111111111111111111111111111111111111111111111111111111111111000 1180591620717411303416
// 185 ¬π 0 1111111111111111111111111111111111111111111111111111111111111111111001 1180591620717411303417
// 217 √ô 0 1111111111111111111111111111111111111111111111111111111111111111111010 1180591620717411303418
// 218 √ö 0 1111111111111111111111111111111111111111111111111111111111111111111011 1180591620717411303419
// 5  0 11111111111111111111111111111111111111111111111111111111111111111111000 2361183241434822606840
// 12 \f 0 11111111111111111111111111111111111111111111111111111111111111111111001 2361183241434822606841
// 26  0 11111111111111111111111111111111111111111111111111111111111111111111010 2361183241434822606842
// 187 ¬ª 0 11111111111111111111111111111111111111111111111111111111111111111111011 2361183241434822606843
// 206 √é 0 11111111111111111111111111111111111111111111111111111111111111111111100 2361183241434822606844
// 191 ¬ø 0 111111111111111111111111111111111111111111111111111111111111111111111010 4722366482869645213690
// 211 √ì 0 111111111111111111111111111111111111111111111111111111111111111111111011 4722366482869645213691
// 195 √É 0 1111111111111111111111111111111111111111111111111111111111111111111111000 9444732965739290427384
// 209 √ë 0 1111111111111111111111111111111111111111111111111111111111111111111111001 9444732965739290427385
// 210 √í 0 1111111111111111111111111111111111111111111111111111111111111111111111010 9444732965739290427386
// 215 √ó 0 1111111111111111111111111111111111111111111111111111111111111111111111011 9444732965739290427387
// 52 4 0 11111111111111111111111111111111111111111111111111111111111111111111111000 18889465931478580854776
// 199 √á 0 11111111111111111111111111111111111111111111111111111111111111111111111001 18889465931478580854777
// 213 √ï 0 11111111111111111111111111111111111111111111111111111111111111111111111010 18889465931478580854778
// 214 √ñ 0 11111111111111111111111111111111111111111111111111111111111111111111111011 18889465931478580854779
// 226 √¢ 0 11111111111111111111111111111111111111111111111111111111111111111111111100 18889465931478580854780
// 203 √ã 0 111111111111111111111111111111111111111111111111111111111111111111111111010 37778931862957161709562
// 216 √ò 0 111111111111111111111111111111111111111111111111111111111111111111111111011 37778931862957161709563
// 229 √• 0 111111111111111111111111111111111111111111111111111111111111111111111111100 37778931862957161709564
// 230 √¶ 0 111111111111111111111111111111111111111111111111111111111111111111111111101 37778931862957161709565
// 207 √è 0 1111111111111111111111111111111111111111111111111111111111111111111111111100 75557863725914323419132
// 220 √ú 0 1111111111111111111111111111111111111111111111111111111111111111111111111101 75557863725914323419133
// 221 √ù 0 11111111111111111111111111111111111111111111111111111111111111111111111111100 151115727451828646838268
// 222 √û 0 11111111111111111111111111111111111111111111111111111111111111111111111111101 151115727451828646838269
// 25  0 111111111111111111111111111111111111111111111111111111111111111111111111111100 302231454903657293676540
// 53 5 0 1111111111111111111111111111111111111111111111111111111111111111111111111111010 604462909807314587353082
// 224 √† 0 1111111111111111111111111111111111111111111111111111111111111111111111111111011 604462909807314587353083
// 225 √° 0 1111111111111111111111111111111111111111111111111111111111111111111111111111100 604462909807314587353084
// 27  0 11111111111111111111111111111111111111111111111111111111111111111111111111111010 1208925819614629174706170
// 219 √õ 0 11111111111111111111111111111111111111111111111111111111111111111111111111111011 1208925819614629174706171
// 228 √§ 0 11111111111111111111111111111111111111111111111111111111111111111111111111111100 1208925819614629174706172
// 55 7 0 111111111111111111111111111111111111111111111111111111111111111111111111111111010 2417851639229258349412346
// 223 √ü 0 111111111111111111111111111111111111111111111111111111111111111111111111111111011 2417851639229258349412347
// 227 √£ 0 1111111111111111111111111111111111111111111111111111111111111111111111111111111000 4835703278458516698824696
// 232 √® 0 1111111111111111111111111111111111111111111111111111111111111111111111111111111001 4835703278458516698824697
// 233 √© 0 1111111111111111111111111111111111111111111111111111111111111111111111111111111010 4835703278458516698824698
// 234 √™ 0 1111111111111111111111111111111111111111111111111111111111111111111111111111111011 4835703278458516698824699
// 57 9 0 11111111111111111111111111111111111111111111111111111111111111111111111111111111000 9671406556917033397649400
// 231 √ß 0 11111111111111111111111111111111111111111111111111111111111111111111111111111111001 9671406556917033397649401
// 236 √¨ 0 11111111111111111111111111111111111111111111111111111111111111111111111111111111010 9671406556917033397649402
// 28  0 111111111111111111111111111111111111111111111111111111111111111111111111111111110110 19342813113834066795298806
// 235 √´ 0 111111111111111111111111111111111111111111111111111111111111111111111111111111110111 19342813113834066795298807
// 237 √≠ 0 111111111111111111111111111111111111111111111111111111111111111111111111111111111000 19342813113834066795298808
// 238 √Æ 0 111111111111111111111111111111111111111111111111111111111111111111111111111111111001 19342813113834066795298809
// 240 √∞ 0 111111111111111111111111111111111111111111111111111111111111111111111111111111111010 19342813113834066795298810
// 244 √¥ 0 111111111111111111111111111111111111111111111111111111111111111111111111111111111011 19342813113834066795298811
// 239 √Ø 0 1111111111111111111111111111111111111111111111111111111111111111111111111111111111000 38685626227668133590597624
// 241 √± 0 1111111111111111111111111111111111111111111111111111111111111111111111111111111111001 38685626227668133590597625
// 242 √≤ 0 1111111111111111111111111111111111111111111111111111111111111111111111111111111111010 38685626227668133590597626
// 29  0 11111111111111111111111111111111111111111111111111111111111111111111111111111111110110 77371252455336267181195254
// 124 | 0 11111111111111111111111111111111111111111111111111111111111111111111111111111111110111 77371252455336267181195255
// 243 √≥ 0 11111111111111111111111111111111111111111111111111111111111111111111111111111111111000 77371252455336267181195256
// 245 √µ 0 11111111111111111111111111111111111111111111111111111111111111111111111111111111111001 77371252455336267181195257
// 246 √∂ 0 11111111111111111111111111111111111111111111111111111111111111111111111111111111111010 77371252455336267181195258
// 249 √π 0 11111111111111111111111111111111111111111111111111111111111111111111111111111111111011 77371252455336267181195259
// 127  0 111111111111111111111111111111111111111111111111111111111111111111111111111111111111000 154742504910672534362390520
// 247 √∑ 0 111111111111111111111111111111111111111111111111111111111111111111111111111111111111001 154742504910672534362390521
// 248 √∏ 0 111111111111111111111111111111111111111111111111111111111111111111111111111111111111010 154742504910672534362390522
// 252 √º 0 111111111111111111111111111111111111111111111111111111111111111111111111111111111111011 154742504910672534362390523
// 30  0 1111111111111111111111111111111111111111111111111111111111111111111111111111111111111000 309485009821345068724781048
// 126 ~ 0 1111111111111111111111111111111111111111111111111111111111111111111111111111111111111001 309485009821345068724781049
// 250 √∫ 0 1111111111111111111111111111111111111111111111111111111111111111111111111111111111111010 309485009821345068724781050
// 251 √ª 0 1111111111111111111111111111111111111111111111111111111111111111111111111111111111111011 309485009821345068724781051
// 253 √Ω 0 1111111111111111111111111111111111111111111111111111111111111111111111111111111111111100 309485009821345068724781052
// 254 √æ 0 1111111111111111111111111111111111111111111111111111111111111111111111111111111111111101 309485009821345068724781053
// 0   0 11111111111111111111111111111111111111111111111111111111111111111111111111111111111111100 618970019642690137449562108
// 2  0 11111111111111111111111111111111111111111111111111111111111111111111111111111111111111101 618970019642690137449562109
// 6  0 11111111111111111111111111111111111111111111111111111111111111111111111111111111111111110 618970019642690137449562110
// 14  0 11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111 618970019642690137449562111
// bytearray(b' aeinorst_cdlpubfgm%\'Ehvwxy.Njkq\n\r()-/ACIOPRST,:BDFLMUz*01<>GVY!"#23=HW`K{}68JXZ;@\x80\x82\x84\x0f\x85\x86\x88\x89\x8a\x07\x10\x8c\x8d\x8e\x90\x91\x92\x94$\x95\x96\x98\x99\x9a\x9c\x08\x12&\x9d\x9e\xa0\xa1\xa2\xa4\x13\xa5\xa6\xa8\x83\xff\x87?\xa9\t\xb1\xb2\x15\x81\x8b\xaa\xb5\xb6\x11\x14\x1f\x8f\xad\x93\xac\xba\x01\x97\xae\x9b\x9f\xb0\x04\x16\xa3\xb4\xa7\\\xab\xb8\x03\xbc^\xb3\xbd\xbe\xc8\xb7\xcc\x0b\x18Q\xcd]\xc0\xc1\xc2\x17\xc4\xc5\xc6\xd0+\xaf\xd4\xc9\xca[\xb9\xd9\xda\x05\x0c\x1a\xbb\xce\xbf\xd3\xc3\xd1\xd2\xd74\xc7\xd5\xd6\xe2\xcb\xd8\xe5\xe6\xcf\xdc\xdd\xde\x195\xe0\xe1\x1b\xdb\xe47\xdf\xe3\xe8\xe9\xea9\xe7\xec\x1c\xeb\xed\xee\xf0\xf4\xef\xf1\xf2\x1d|\xf3\xf5\xf6\xf9\x7f\xf7\xf8\xfc\x1e~\xfa\xfb\xfd\xfe\x00\x02\x06\x0e') bytearray(b'\x00\x00\x01\x08\x06\x04\x08\x05\x0e\t\x08\t\x03\x05\x01\x00\x02\x02\x02\x02\x02\x03\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x00\x02\x01\x02\x03\x06\x05\x03\x03\x03\x04\x01\x03\x02\x05\x02\x04\x04\x05\x03\x02\x04\x05\x02\x04\x05\x04\x02\x02\x01\x03\x03\x02\x04\x03\x06\x03\x06\x04\x06\x04')
// This file was automatically generated by makeqstrdata.py

QDEF(MP_QSTR_NULL, (const byte*)"\x00\x00" "")
QDEF(MP_QSTR_, (const byte*)"\x05\x00" "")
QDEF(MP_QSTR___dir__, (const byte*)"\x7a\x07" "__dir__")
QDEF(MP_QSTR___abs__, (const byte*)"\x95\x07" "__abs__")
QDEF(MP_QSTR___add__, (const byte*)"\xc4\x07" "__add__")
QDEF(MP_QSTR___and__, (const byte*)"\x0e\x07" "__and__")
QDEF(MP_QSTR___bool__, (const byte*)"\x2b\x08" "__bool__")
QDEF(MP_QSTR___build_class__, (const byte*)"\x42\x0f" "__build_class__")
QDEF(MP_QSTR___call__, (const byte*)"\xa7\x08" "__call__")
QDEF(MP_QSTR___class__, (const byte*)"\x2b\x09" "__class__")
QDEF(MP_QSTR___contains__, (const byte*)"\xc6\x0c" "__contains__")
QDEF(MP_QSTR___del__, (const byte*)"\x68\x07" "__del__")
QDEF(MP_QSTR___delete__, (const byte*)"\xdc\x0a" "__delete__")
QDEF(MP_QSTR___delitem__, (const byte*)"\xfd\x0b" "__delitem__")
QDEF(MP_QSTR___dict__, (const byte*)"\x7f\x08" "__dict__")
QDEF(MP_QSTR___divmod__, (const byte*)"\x78\x0a" "__divmod__")
QDEF(MP_QSTR___enter__, (const byte*)"\x6d\x09" "__enter__")
QDEF(MP_QSTR___eq__, (const byte*)"\x71\x06" "__eq__")
QDEF(MP_QSTR___exit__, (const byte*)"\x45\x08" "__exit__")
QDEF(MP_QSTR___file__, (const byte*)"\x03\x08" "__file__")
QDEF(MP_QSTR___floordiv__, (const byte*)"\x46\x0c" "__floordiv__")
QDEF(MP_QSTR___func__, (const byte*)"\x5b\x08" "__func__")
QDEF(MP_QSTR___ge__, (const byte*)"\xa7\x06" "__ge__")
QDEF(MP_QSTR___get__, (const byte*)"\xb3\x07" "__get__")
QDEF(MP_QSTR___getattr__, (const byte*)"\x40\x0b" "__getattr__")
QDEF(MP_QSTR___getitem__, (const byte*)"\x26\x0b" "__getitem__")
QDEF(MP_QSTR___gt__, (const byte*)"\xb6\x06" "__gt__")
QDEF(MP_QSTR___hash__, (const byte*)"\xf7\x08" "__hash__")
QDEF(MP_QSTR___iadd__, (const byte*)"\x6d\x08" "__iadd__")
QDEF(MP_QSTR___import__, (const byte*)"\x38\x0a" "__import__")
QDEF(MP_QSTR___init__, (const byte*)"\x5f\x08" "__init__")
QDEF(MP_QSTR___invert__, (const byte*)"\xf7\x0a" "__invert__")
QDEF(MP_QSTR___isub__, (const byte*)"\x08\x08" "__isub__")
QDEF(MP_QSTR___iter__, (const byte*)"\xcf\x08" "__iter__")
QDEF(MP_QSTR___le__, (const byte*)"\xcc\x06" "__le__")
QDEF(MP_QSTR___len__, (const byte*)"\xe2\x07" "__len__")
QDEF(MP_QSTR___lshift__, (const byte*)"\x09\x0a" "__lshift__")
QDEF(MP_QSTR___lt__, (const byte*)"\x5d\x06" "__lt__")
QDEF(MP_QSTR___main__, (const byte*)"\x8e\x08" "__main__")
QDEF(MP_QSTR___mod__, (const byte*)"\x63\x07" "__mod__")
QDEF(MP_QSTR___module__, (const byte*)"\xff\x0a" "__module__")
QDEF(MP_QSTR___mul__, (const byte*)"\x31\x07" "__mul__")
QDEF(MP_QSTR___name__, (const byte*)"\xe2\x08" "__name__")
QDEF(MP_QSTR___neg__, (const byte*)"\x69\x07" "__neg__")
QDEF(MP_QSTR___new__, (const byte*)"\x79\x07" "__new__")
QDEF(MP_QSTR___next__, (const byte*)"\x02\x08" "__next__")
QDEF(MP_QSTR___or__, (const byte*)"\x38\x06" "__or__")
QDEF(MP_QSTR___path__, (const byte*)"\xc8\x08" "__path__")
QDEF(MP_QSTR___pos__, (const byte*)"\x29\x07" "__pos__")
QDEF(MP_QSTR___pow__, (const byte*)"\x2d\x07" "__pow__")
QDEF(MP_QSTR___qualname__, (const byte*)"\x6b\x0c" "__qualname__")
QDEF(MP_QSTR___radd__, (const byte*)"\x16\x08" "__radd__")
QDEF(MP_QSTR___rand__, (const byte*)"\xdc\x08" "__rand__")
QDEF(MP_QSTR___repl_print__, (const byte*)"\x01\x0e" "__repl_print__")
QDEF(MP_QSTR___repr__, (const byte*)"\x10\x08" "__repr__")
QDEF(MP_QSTR___reversed__, (const byte*)"\x61\x0c" "__reversed__")
QDEF(MP_QSTR___rfloordiv__, (const byte*)"\x54\x0d" "__rfloordiv__")
QDEF(MP_QSTR___rlshift__, (const byte*)"\x1b\x0b" "__rlshift__")
QDEF(MP_QSTR___rmod__, (const byte*)"\x31\x08" "__rmod__")
QDEF(MP_QSTR___rmul__, (const byte*)"\x63\x08" "__rmul__")
QDEF(MP_QSTR___ror__, (const byte*)"\x2a\x07" "__ror__")
QDEF(MP_QSTR___rpow__, (const byte*)"\xff\x08" "__rpow__")
QDEF(MP_QSTR___rrshift__, (const byte*)"\xc5\x0b" "__rrshift__")
QDEF(MP_QSTR___rshift__, (const byte*)"\x57\x0a" "__rshift__")
QDEF(MP_QSTR___rsub__, (const byte*)"\x73\x08" "__rsub__")
QDEF(MP_QSTR___rtruediv__, (const byte*)"\x5a\x0c" "__rtruediv__")
QDEF(MP_QSTR___rxor__, (const byte*)"\xf2\x08" "__rxor__")
QDEF(MP_QSTR___set__, (const byte*)"\xa7\x07" "__set__")
QDEF(MP_QSTR___setitem__, (const byte*)"\x32\x0b" "__setitem__")
QDEF(MP_QSTR___str__, (const byte*)"\xd0\x07" "__str__")
QDEF(MP_QSTR___sub__, (const byte*)"\x21\x07" "__sub__")
QDEF(MP_QSTR___traceback__, (const byte*)"\x4f\x0d" "__traceback__")
QDEF(MP_QSTR___truediv__, (const byte*)"\x88\x0b" "__truediv__")
QDEF(MP_QSTR___xor__, (const byte*)"\x20\x07" "__xor__")
QDEF(MP_QSTR__star_, (const byte*)"\x8f\x01" "*")
QDEF(MP_QSTR__, (const byte*)"\xfa\x01" "_")
QDEF(MP_QSTR__slash_, (const byte*)"\x8a\x01" "/")
QDEF(MP_QSTR__percent__hash_o, (const byte*)"\x6c\x03" "%#o")
QDEF(MP_QSTR__percent__hash_x, (const byte*)"\x7b\x03" "%#x")
QDEF(MP_QSTR__brace_open__colon__hash_b_brace_close_, (const byte*)"\x58\x05" "{:#b}")
QDEF(MP_QSTR__space_, (const byte*)"\x85\x01" " ")
QDEF(MP_QSTR__0x0a_, (const byte*)"\xaf\x01" "\x0a")
QDEF(MP_QSTR_maximum_space_recursion_space_depth_space_exceeded, (const byte*)"\x73\x20" "maximum recursion depth exceeded")
QDEF(MP_QSTR__lt_module_gt_, (const byte*)"\xbd\x08" "<module>")
QDEF(MP_QSTR__lt_lambda_gt_, (const byte*)"\x80\x08" "<lambda>")
QDEF(MP_QSTR__lt_listcomp_gt_, (const byte*)"\xd4\x0a" "<listcomp>")
QDEF(MP_QSTR__lt_dictcomp_gt_, (const byte*)"\xcc\x0a" "<dictcomp>")
QDEF(MP_QSTR__lt_setcomp_gt_, (const byte*)"\x54\x09" "<setcomp>")
QDEF(MP_QSTR__lt_genexpr_gt_, (const byte*)"\x34\x09" "<genexpr>")
QDEF(MP_QSTR__lt_string_gt_, (const byte*)"\x52\x08" "<string>")
QDEF(MP_QSTR__lt_stdin_gt_, (const byte*)"\xe3\x07" "<stdin>")
QDEF(MP_QSTR_utf_hyphen_8, (const byte*)"\xb7\x05" "utf-8")
QDEF(MP_QSTR__dot_frozen, (const byte*)"\x81\x07" ".frozen")
QDEF(MP_QSTR__slash_lib, (const byte*)"\x8d\x04" "/lib")
QDEF(MP_QSTR_ArithmeticError, (const byte*)"\x2d\x0f" "ArithmeticError")
QDEF(MP_QSTR_AssertionError, (const byte*)"\x97\x0e" "AssertionError")
QDEF(MP_QSTR_AttributeError, (const byte*)"\x21\x0e" "AttributeError")
QDEF(MP_QSTR_BaseException, (const byte*)"\x07\x0d" "BaseException")
QDEF(MP_QSTR_BytesIO, (const byte*)"\x1a\x07" "BytesIO")
QDEF(MP_QSTR_DEBUG, (const byte*)"\x34\x05" "DEBUG")
QDEF(MP_QSTR_Device, (const byte*)"\x1d\x06" "Device")
QDEF(MP_QSTR_EACCES, (const byte*)"\x37\x06" "EACCES")
QDEF(MP_QSTR_EADDRINUSE, (const byte*)"\x17\x0a" "EADDRINUSE")
QDEF(MP_QSTR_EAGAIN, (const byte*)"\x20\x06" "EAGAIN")
QDEF(MP_QSTR_EALREADY, (const byte*)"\x46\x08" "EALREADY")
QDEF(MP_QSTR_EBADF, (const byte*)"\x61\x05" "EBADF")
QDEF(MP_QSTR_ECONNABORTED, (const byte*)"\x27\x0c" "ECONNABORTED")
QDEF(MP_QSTR_ECONNREFUSED, (const byte*)"\x3a\x0c" "ECONNREFUSED")
QDEF(MP_QSTR_ECONNRESET, (const byte*)"\x19\x0a" "ECONNRESET")
QDEF(MP_QSTR_EEXIST, (const byte*)"\x53\x06" "EEXIST")
QDEF(MP_QSTR_EHOSTUNREACH, (const byte*)"\x86\x0c" "EHOSTUNREACH")
QDEF(MP_QSTR_EINPROGRESS, (const byte*)"\x9a\x0b" "EINPROGRESS")
QDEF(MP_QSTR_EINVAL, (const byte*)"\x5c\x06" "EINVAL")
QDEF(MP_QSTR_EIO, (const byte*)"\x86\x03" "EIO")
QDEF(MP_QSTR_EISDIR, (const byte*)"\xa5\x06" "EISDIR")
QDEF(MP_QSTR_ENOBUFS, (const byte*)"\xe3\x07" "ENOBUFS")
QDEF(MP_QSTR_ENODEV, (const byte*)"\xb6\x06" "ENODEV")
QDEF(MP_QSTR_ENOENT, (const byte*)"\x5e\x06" "ENOENT")
QDEF(MP_QSTR_ENOMEM, (const byte*)"\xa4\x06" "ENOMEM")
QDEF(MP_QSTR_ENOTCONN, (const byte*)"\x79\x08" "ENOTCONN")
QDEF(MP_QSTR_EOFError, (const byte*)"\x91\x08" "EOFError")
QDEF(MP_QSTR_EOPNOTSUPP, (const byte*)"\xac\x0a" "EOPNOTSUPP")
QDEF(MP_QSTR_EPERM, (const byte*)"\xea\x05" "EPERM")
QDEF(MP_QSTR_ETIMEDOUT, (const byte*)"\xff\x09" "ETIMEDOUT")
QDEF(MP_QSTR_Ellipsis, (const byte*)"\xf0\x08" "Ellipsis")
QDEF(MP_QSTR_Exception, (const byte*)"\xf2\x09" "Exception")
QDEF(MP_QSTR_FileIO, (const byte*)"\xc5\x06" "FileIO")
QDEF(MP_QSTR_Flash, (const byte*)"\x95\x05" "Flash")
QDEF(MP_QSTR_GeneratorExit, (const byte*)"\x16\x0d" "GeneratorExit")
QDEF(MP_QSTR_ImportError, (const byte*)"\x20\x0b" "ImportError")
QDEF(MP_QSTR_IndentationError, (const byte*)"\x5c\x10" "IndentationError")
QDEF(MP_QSTR_IndexError, (const byte*)"\x83\x0a" "IndexError")
QDEF(MP_QSTR_KeyError, (const byte*)"\xea\x08" "KeyError")
QDEF(MP_QSTR_KeyboardInterrupt, (const byte*)"\xaf\x11" "KeyboardInterrupt")
QDEF(MP_QSTR_LookupError, (const byte*)"\xff\x0b" "LookupError")
QDEF(MP_QSTR_MemoryError, (const byte*)"\xdc\x0b" "MemoryError")
QDEF(MP_QSTR_MpyError, (const byte*)"\x39\x08" "MpyError")
QDEF(MP_QSTR_NameError, (const byte*)"\xba\x09" "NameError")
QDEF(MP_QSTR_NoneType, (const byte*)"\x17\x08" "NoneType")
QDEF(MP_QSTR_NotImplementedError, (const byte*)"\xc6\x13" "NotImplementedError")
QDEF(MP_QSTR_OSError, (const byte*)"\xa1\x07" "OSError")
QDEF(MP_QSTR_OrderedDict, (const byte*)"\xf0\x0b" "OrderedDict")
QDEF(MP_QSTR_OverflowError, (const byte*)"\x81\x0d" "OverflowError")
QDEF(MP_QSTR_PortIn, (const byte*)"\xfb\x06" "PortIn")
QDEF(MP_QSTR_PortOut, (const byte*)"\x92\x07" "PortOut")
QDEF(MP_QSTR_ReloadException, (const byte*)"\x03\x0f" "ReloadException")
QDEF(MP_QSTR_RuntimeError, (const byte*)"\x61\x0c" "RuntimeError")
QDEF(MP_QSTR_StopIteration, (const byte*)"\xea\x0d" "StopIteration")
QDEF(MP_QSTR_StringIO, (const byte*)"\x76\x08" "StringIO")
QDEF(MP_QSTR_SyntaxError, (const byte*)"\x94\x0b" "SyntaxError")
QDEF(MP_QSTR_SystemExit, (const byte*)"\x20\x0a" "SystemExit")
QDEF(MP_QSTR_TextIOWrapper, (const byte*)"\xad\x0d" "TextIOWrapper")
QDEF(MP_QSTR_TimeoutError, (const byte*)"\x66\x0c" "TimeoutError")
QDEF(MP_QSTR_TypeError, (const byte*)"\x25\x09" "TypeError")
QDEF(MP_QSTR_UnicodeError, (const byte*)"\x22\x0c" "UnicodeError")
QDEF(MP_QSTR_ValueError, (const byte*)"\x96\x0a" "ValueError")
QDEF(MP_QSTR_VfsFat, (const byte*)"\x15\x06" "VfsFat")
QDEF(MP_QSTR_ZeroDivisionError, (const byte*)"\xb6\x11" "ZeroDivisionError")
QDEF(MP_QSTR_abs, (const byte*)"\x95\x03" "abs")
QDEF(MP_QSTR_add, (const byte*)"\x44\x03" "add")
QDEF(MP_QSTR_all, (const byte*)"\x44\x03" "all")
QDEF(MP_QSTR_any, (const byte*)"\x13\x03" "any")
QDEF(MP_QSTR_append, (const byte*)"\x6b\x06" "append")
QDEF(MP_QSTR_args, (const byte*)"\xc2\x04" "args")
QDEF(MP_QSTR_argv, (const byte*)"\xc7\x04" "argv")
QDEF(MP_QSTR_array, (const byte*)"\x7c\x05" "array")
QDEF(MP_QSTR_bin, (const byte*)"\xe0\x03" "bin")
QDEF(MP_QSTR_bool, (const byte*)"\xeb\x04" "bool")
QDEF(MP_QSTR_bound_method, (const byte*)"\x97\x0c" "bound_method")
QDEF(MP_QSTR_buffering, (const byte*)"\x25\x09" "buffering")
QDEF(MP_QSTR_builtins, (const byte*)"\xf7\x08" "builtins")
QDEF(MP_QSTR_bytearray, (const byte*)"\x76\x09" "bytearray")
QDEF(MP_QSTR_bytecode, (const byte*)"\x22\x08" "bytecode")
QDEF(MP_QSTR_byteorder, (const byte*)"\x61\x09" "byteorder")
QDEF(MP_QSTR_bytes, (const byte*)"\x5c\x05" "bytes")
QDEF(MP_QSTR_callable, (const byte*)"\x0d\x08" "callable")
QDEF(MP_QSTR_center, (const byte*)"\x4e\x06" "center")
QDEF(MP_QSTR_chdir, (const byte*)"\xb1\x05" "chdir")
QDEF(MP_QSTR_chr, (const byte*)"\xdc\x03" "chr")
QDEF(MP_QSTR_circuitpython, (const byte*)"\x02\x0d" "circuitpython")
QDEF(MP_QSTR_classmethod, (const byte*)"\xb4\x0b" "classmethod")
QDEF(MP_QSTR_clear, (const byte*)"\x7c\x05" "clear")
QDEF(MP_QSTR_close, (const byte*)"\x33\x05" "close")
QDEF(MP_QSTR_closure, (const byte*)"\x74\x07" "closure")
QDEF(MP_QSTR_collect, (const byte*)"\x9b\x07" "collect")
QDEF(MP_QSTR_collections, (const byte*)"\xe0\x0b" "collections")
QDEF(MP_QSTR_compile, (const byte*)"\xf4\x07" "compile")
QDEF(MP_QSTR_complex, (const byte*)"\xc5\x07" "complex")
QDEF(MP_QSTR_const, (const byte*)"\xc0\x05" "const")
QDEF(MP_QSTR_copy, (const byte*)"\xe0\x04" "copy")
QDEF(MP_QSTR_count, (const byte*)"\xa6\x05" "count")
QDEF(MP_QSTR_decode, (const byte*)"\xa9\x06" "decode")
QDEF(MP_QSTR_default, (const byte*)"\xce\x07" "default")
QDEF(MP_QSTR_delattr, (const byte*)"\xdb\x07" "delattr")
QDEF(MP_QSTR_deleter, (const byte*)"\x6e\x07" "deleter")
QDEF(MP_QSTR_devices, (const byte*)"\xae\x07" "devices")
QDEF(MP_QSTR_dict, (const byte*)"\x3f\x04" "dict")
QDEF(MP_QSTR_dict_view, (const byte*)"\x2d\x09" "dict_view")
QDEF(MP_QSTR_difference, (const byte*)"\x72\x0a" "difference")
QDEF(MP_QSTR_difference_update, (const byte*)"\x9c\x11" "difference_update")
QDEF(MP_QSTR_dir, (const byte*)"\xfa\x03" "dir")
QDEF(MP_QSTR_disable, (const byte*)"\x91\x07" "disable")
QDEF(MP_QSTR_discard, (const byte*)"\x0f\x07" "discard")
QDEF(MP_QSTR_divmod, (const byte*)"\xb8\x06" "divmod")
QDEF(MP_QSTR_doc, (const byte*)"\x2d\x03" "doc")
QDEF(MP_QSTR_dump, (const byte*)"\xe9\x04" "dump")
QDEF(MP_QSTR_dumps, (const byte*)"\x7a\x05" "dumps")
QDEF(MP_QSTR_enable, (const byte*)"\x04\x06" "enable")
QDEF(MP_QSTR_encode, (const byte*)"\x43\x06" "encode")
QDEF(MP_QSTR_encoding, (const byte*)"\x06\x08" "encoding")
QDEF(MP_QSTR_end, (const byte*)"\x0a\x03" "end")
QDEF(MP_QSTR_endswith, (const byte*)"\x1b\x08" "endswith")
QDEF(MP_QSTR_enumerate, (const byte*)"\x71\x09" "enumerate")
QDEF(MP_QSTR_errno, (const byte*)"\xc1\x05" "errno")
QDEF(MP_QSTR_eval, (const byte*)"\x9b\x04" "eval")
QDEF(MP_QSTR_exec, (const byte*)"\x1e\x04" "exec")
QDEF(MP_QSTR_exit, (const byte*)"\x85\x04" "exit")
QDEF(MP_QSTR_extend, (const byte*)"\x63\x06" "extend")
QDEF(MP_QSTR_file, (const byte*)"\xc3\x04" "file")
QDEF(MP_QSTR_filename, (const byte*)"\xe4\x08" "filename")
QDEF(MP_QSTR_filename2, (const byte*)"\x56\x09" "filename2")
QDEF(MP_QSTR_filter, (const byte*)"\x25\x06" "filter")
QDEF(MP_QSTR_find, (const byte*)"\x01\x04" "find")
QDEF(MP_QSTR_float, (const byte*)"\x35\x05" "float")
QDEF(MP_QSTR_flush, (const byte*)"\x61\x05" "flush")
QDEF(MP_QSTR_format, (const byte*)"\x26\x06" "format")
QDEF(MP_QSTR_from_bytes, (const byte*)"\x35\x0a" "from_bytes")
QDEF(MP_QSTR_fromkeys, (const byte*)"\x37\x08" "fromkeys")
QDEF(MP_QSTR_frozenset, (const byte*)"\xed\x09" "frozenset")
QDEF(MP_QSTR_function, (const byte*)"\x27\x08" "function")
QDEF(MP_QSTR_gc, (const byte*)"\x61\x02" "gc")
QDEF(MP_QSTR_generator, (const byte*)"\x96\x09" "generator")
QDEF(MP_QSTR_get, (const byte*)"\x33\x03" "get")
QDEF(MP_QSTR_getattr, (const byte*)"\xc0\x07" "getattr")
QDEF(MP_QSTR_getcwd, (const byte*)"\x03\x06" "getcwd")
QDEF(MP_QSTR_getter, (const byte*)"\x90\x06" "getter")
QDEF(MP_QSTR_getvalue, (const byte*)"\x78\x08" "getvalue")
QDEF(MP_QSTR_globals, (const byte*)"\x9d\x07" "globals")
QDEF(MP_QSTR_group, (const byte*)"\xba\x05" "group")
QDEF(MP_QSTR_groups, (const byte*)"\x89\x06" "groups")
QDEF(MP_QSTR_hasattr, (const byte*)"\x8c\x07" "hasattr")
QDEF(MP_QSTR_hash, (const byte*)"\xb7\x04" "hash")
QDEF(MP_QSTR_heap_lock, (const byte*)"\xad\x09" "heap_lock")
QDEF(MP_QSTR_heap_unlock, (const byte*)"\x56\x0b" "heap_unlock")
QDEF(MP_QSTR_help, (const byte*)"\x94\x04" "help")
QDEF(MP_QSTR_hex, (const byte*)"\x70\x03" "hex")
QDEF(MP_QSTR_id, (const byte*)"\x28\x02" "id")
QDEF(MP_QSTR_ilistdir, (const byte*)"\x71\x08" "ilistdir")
QDEF(MP_QSTR_imag, (const byte*)"\x47\x04" "imag")
QDEF(MP_QSTR_implementation, (const byte*)"\x17\x0e" "implementation")
QDEF(MP_QSTR_index, (const byte*)"\x7b\x05" "index")
QDEF(MP_QSTR_indices, (const byte*)"\x5a\x07" "indices")
QDEF(MP_QSTR_input, (const byte*)"\x73\x05" "input")
QDEF(MP_QSTR_insert, (const byte*)"\x12\x06" "insert")
QDEF(MP_QSTR_int, (const byte*)"\x16\x03" "int")
QDEF(MP_QSTR_intersection, (const byte*)"\x28\x0c" "intersection")
QDEF(MP_QSTR_intersection_update, (const byte*)"\x06\x13" "intersection_update")
QDEF(MP_QSTR_io, (const byte*)"\x23\x02" "io")
QDEF(MP_QSTR_ioctl, (const byte*)"\x78\x05" "ioctl")
QDEF(MP_QSTR_isalpha, (const byte*)"\xeb\x07" "isalpha")
QDEF(MP_QSTR_isdigit, (const byte*)"\xa8\x07" "isdigit")
QDEF(MP_QSTR_isdisjoint, (const byte*)"\xf7\x0a" "isdisjoint")
QDEF(MP_QSTR_isenabled, (const byte*)"\x9a\x09" "isenabled")
QDEF(MP_QSTR_isinstance, (const byte*)"\xb6\x0a" "isinstance")
QDEF(MP_QSTR_islower, (const byte*)"\xfc\x07" "islower")
QDEF(MP_QSTR_isspace, (const byte*)"\x5b\x07" "isspace")
QDEF(MP_QSTR_issubclass, (const byte*)"\xb5\x0a" "issubclass")
QDEF(MP_QSTR_issubset, (const byte*)"\xb9\x08" "issubset")
QDEF(MP_QSTR_issuperset, (const byte*)"\xfc\x0a" "issuperset")
QDEF(MP_QSTR_isupper, (const byte*)"\xdd\x07" "isupper")
QDEF(MP_QSTR_items, (const byte*)"\xe3\x05" "items")
QDEF(MP_QSTR_iter, (const byte*)"\x8f\x04" "iter")
QDEF(MP_QSTR_iterable, (const byte*)"\x25\x08" "iterable")
QDEF(MP_QSTR_iterator, (const byte*)"\x47\x08" "iterator")
QDEF(MP_QSTR_join, (const byte*)"\xa7\x04" "join")
QDEF(MP_QSTR_json, (const byte*)"\xfd\x04" "json")
QDEF(MP_QSTR_kbd_intr, (const byte*)"\xf6\x08" "kbd_intr")
QDEF(MP_QSTR_keepends, (const byte*)"\x62\x08" "keepends")
QDEF(MP_QSTR_key, (const byte*)"\x32\x03" "key")
QDEF(MP_QSTR_keys, (const byte*)"\x01\x04" "keys")
QDEF(MP_QSTR_label, (const byte*)"\x43\x05" "label")
QDEF(MP_QSTR_len, (const byte*)"\x62\x03" "len")
QDEF(MP_QSTR_list, (const byte*)"\x27\x04" "list")
QDEF(MP_QSTR_little, (const byte*)"\x89\x06" "little")
QDEF(MP_QSTR_load, (const byte*)"\x63\x04" "load")
QDEF(MP_QSTR_loads, (const byte*)"\xb0\x05" "loads")
QDEF(MP_QSTR_locals, (const byte*)"\x3b\x06" "locals")
QDEF(MP_QSTR_lower, (const byte*)"\xc6\x05" "lower")
QDEF(MP_QSTR_lstrip, (const byte*)"\xe5\x06" "lstrip")
QDEF(MP_QSTR_map, (const byte*)"\xb9\x03" "map")
QDEF(MP_QSTR_match, (const byte*)"\x96\x05" "match")
QDEF(MP_QSTR_max, (const byte*)"\xb1\x03" "max")
QDEF(MP_QSTR_maxsize, (const byte*)"\xd4\x07" "maxsize")
QDEF(MP_QSTR_mem_alloc, (const byte*)"\x52\x09" "mem_alloc")
QDEF(MP_QSTR_mem_free, (const byte*)"\xcb\x08" "mem_free")
QDEF(MP_QSTR_memoryview, (const byte*)"\x69\x0a" "memoryview")
QDEF(MP_QSTR_micropython, (const byte*)"\x0b\x0b" "micropython")
QDEF(MP_QSTR_min, (const byte*)"\xaf\x03" "min")
QDEF(MP_QSTR_mkdir, (const byte*)"\x9c\x05" "mkdir")
QDEF(MP_QSTR_mkfs, (const byte*)"\x76\x04" "mkfs")
QDEF(MP_QSTR_mode, (const byte*)"\x26\x04" "mode")
QDEF(MP_QSTR_module, (const byte*)"\xbf\x06" "module")
QDEF(MP_QSTR_modules, (const byte*)"\xec\x07" "modules")
QDEF(MP_QSTR_mount, (const byte*)"\xa8\x05" "mount")
QDEF(MP_QSTR_name, (const byte*)"\xa2\x04" "name")
QDEF(MP_QSTR_namedtuple, (const byte*)"\x1e\x0a" "namedtuple")
QDEF(MP_QSTR_next, (const byte*)"\x42\x04" "next")
QDEF(MP_QSTR_object, (const byte*)"\x90\x06" "object")
QDEF(MP_QSTR_oct, (const byte*)"\xfd\x03" "oct")
QDEF(MP_QSTR_open, (const byte*)"\xd1\x04" "open")
QDEF(MP_QSTR_opt_level, (const byte*)"\x87\x09" "opt_level")
QDEF(MP_QSTR_ord, (const byte*)"\x1c\x03" "ord")
QDEF(MP_QSTR_partition, (const byte*)"\x87\x09" "partition")
QDEF(MP_QSTR_path, (const byte*)"\x88\x04" "path")
QDEF(MP_QSTR_pend_throw, (const byte*)"\xf3\x0a" "pend_throw")
QDEF(MP_QSTR_pop, (const byte*)"\x2a\x03" "pop")
QDEF(MP_QSTR_popitem, (const byte*)"\xbf\x07" "popitem")
QDEF(MP_QSTR_ports, (const byte*)"\xaf\x05" "ports")
QDEF(MP_QSTR_pow, (const byte*)"\x2d\x03" "pow")
QDEF(MP_QSTR_print, (const byte*)"\x54\x05" "print")
QDEF(MP_QSTR_print_exception, (const byte*)"\x1c\x0f" "print_exception")
QDEF(MP_QSTR_property, (const byte*)"\xc2\x08" "property")
QDEF(MP_QSTR_r, (const byte*)"\xd7\x01" "r")
QDEF(MP_QSTR_range, (const byte*)"\x1a\x05" "range")
QDEF(MP_QSTR_re, (const byte*)"\xd2\x02" "re")
QDEF(MP_QSTR_read, (const byte*)"\xb7\x04" "read")
QDEF(MP_QSTR_readblocks, (const byte*)"\x2d\x0a" "readblocks")
QDEF(MP_QSTR_readinto, (const byte*)"\x4b\x08" "readinto")
QDEF(MP_QSTR_readline, (const byte*)"\xf9\x08" "readline")
QDEF(MP_QSTR_readlines, (const byte*)"\x6a\x09" "readlines")
QDEF(MP_QSTR_readonly, (const byte*)"\x03\x08" "readonly")
QDEF(MP_QSTR_real, (const byte*)"\xbf\x04" "real")
QDEF(MP_QSTR_remove, (const byte*)"\x63\x06" "remove")
QDEF(MP_QSTR_rename, (const byte*)"\x35\x06" "rename")
QDEF(MP_QSTR_replace, (const byte*)"\x49\x07" "replace")
QDEF(MP_QSTR_repr, (const byte*)"\xd0\x04" "repr")
QDEF(MP_QSTR_reverse, (const byte*)"\x25\x07" "reverse")
QDEF(MP_QSTR_reversed, (const byte*)"\xa1\x08" "reversed")
QDEF(MP_QSTR_rfind, (const byte*)"\xd2\x05" "rfind")
QDEF(MP_QSTR_rindex, (const byte*)"\xe9\x06" "rindex")
QDEF(MP_QSTR_rmdir, (const byte*)"\x45\x05" "rmdir")
QDEF(MP_QSTR_round, (const byte*)"\xe7\x05" "round")
QDEF(MP_QSTR_rpartition, (const byte*)"\x15\x0a" "rpartition")
QDEF(MP_QSTR_rsplit, (const byte*)"\xa5\x06" "rsplit")
QDEF(MP_QSTR_rstrip, (const byte*)"\x3b\x06" "rstrip")
QDEF(MP_QSTR_search, (const byte*)"\xab\x06" "search")
QDEF(MP_QSTR_seek, (const byte*)"\x9d\x04" "seek")
QDEF(MP_QSTR_send, (const byte*)"\xb9\x04" "send")
QDEF(MP_QSTR_send_report, (const byte*)"\x08\x0b" "send_report")
QDEF(MP_QSTR_sep, (const byte*)"\x23\x03" "sep")
QDEF(MP_QSTR_set, (const byte*)"\x27\x03" "set")
QDEF(MP_QSTR_setattr, (const byte*)"\xd4\x07" "setattr")
QDEF(MP_QSTR_setdefault, (const byte*)"\x6c\x0a" "setdefault")
QDEF(MP_QSTR_setter, (const byte*)"\x04\x06" "setter")
QDEF(MP_QSTR_slice, (const byte*)"\xb5\x05" "slice")
QDEF(MP_QSTR_sort, (const byte*)"\xbf\x04" "sort")
QDEF(MP_QSTR_sorted, (const byte*)"\x5e\x06" "sorted")
QDEF(MP_QSTR_span, (const byte*)"\xc9\x04" "span")
QDEF(MP_QSTR_split, (const byte*)"\xb7\x05" "split")
QDEF(MP_QSTR_splitlines, (const byte*)"\x6a\x0a" "splitlines")
QDEF(MP_QSTR_start, (const byte*)"\x85\x05" "start")
QDEF(MP_QSTR_startswith, (const byte*)"\x74\x0a" "startswith")
QDEF(MP_QSTR_stat, (const byte*)"\xd7\x04" "stat")
QDEF(MP_QSTR_staticmethod, (const byte*)"\x62\x0c" "staticmethod")
QDEF(MP_QSTR_statvfs, (const byte*)"\x14\x07" "statvfs")
QDEF(MP_QSTR_stderr, (const byte*)"\xa3\x06" "stderr")
QDEF(MP_QSTR_stdin, (const byte*)"\x21\x05" "stdin")
QDEF(MP_QSTR_stdout, (const byte*)"\x08\x06" "stdout")
QDEF(MP_QSTR_step, (const byte*)"\x57\x04" "step")
QDEF(MP_QSTR_stop, (const byte*)"\x9d\x04" "stop")
QDEF(MP_QSTR_str, (const byte*)"\x50\x03" "str")
QDEF(MP_QSTR_strerror, (const byte*)"\x48\x08" "strerror")
QDEF(MP_QSTR_strip, (const byte*)"\x29\x05" "strip")
QDEF(MP_QSTR_sub, (const byte*)"\x21\x03" "sub")
QDEF(MP_QSTR_sum, (const byte*)"\x2e\x03" "sum")
QDEF(MP_QSTR_super, (const byte*)"\xc4\x05" "super")
QDEF(MP_QSTR_symmetric_difference, (const byte*)"\xce\x14" "symmetric_difference")
QDEF(MP_QSTR_symmetric_difference_update, (const byte*)"\x60\x1b" "symmetric_difference_update")
QDEF(MP_QSTR_sync, (const byte*)"\xa2\x04" "sync")
QDEF(MP_QSTR_sys, (const byte*)"\xbc\x03" "sys")
QDEF(MP_QSTR_tell, (const byte*)"\x14\x04" "tell")
QDEF(MP_QSTR_throw, (const byte*)"\xb3\x05" "throw")
QDEF(MP_QSTR_to_bytes, (const byte*)"\xd8\x08" "to_bytes")
QDEF(MP_QSTR_tuple, (const byte*)"\xfd\x05" "tuple")
QDEF(MP_QSTR_type, (const byte*)"\x9d\x04" "type")
QDEF(MP_QSTR_uio, (const byte*)"\xb6\x03" "uio")
QDEF(MP_QSTR_umount, (const byte*)"\xdd\x06" "umount")
QDEF(MP_QSTR_union, (const byte*)"\xf6\x05" "union")
QDEF(MP_QSTR_update, (const byte*)"\xb4\x06" "update")
QDEF(MP_QSTR_upper, (const byte*)"\x27\x05" "upper")
QDEF(MP_QSTR_usage, (const byte*)"\x01\x05" "usage")
QDEF(MP_QSTR_usage_page, (const byte*)"\xec\x0a" "usage_page")
QDEF(MP_QSTR_usb_hid, (const byte*)"\xdb\x07" "usb_hid")
QDEF(MP_QSTR_usb_midi, (const byte*)"\xb7\x08" "usb_midi")
QDEF(MP_QSTR_value, (const byte*)"\x4e\x05" "value")
QDEF(MP_QSTR_values, (const byte*)"\x7d\x06" "values")
QDEF(MP_QSTR_version, (const byte*)"\xbf\x07" "version")
QDEF(MP_QSTR_version_info, (const byte*)"\x6e\x0c" "version_info")
QDEF(MP_QSTR_write, (const byte*)"\x98\x05" "write")
QDEF(MP_QSTR_writeblocks, (const byte*)"\x02\x0b" "writeblocks")
QDEF(MP_QSTR_zip, (const byte*)"\xe6\x03" "zip")
TRANSLATION("%q() takes %d positional arguments but %d were given", 53, { 0xe1, 0xe9, 0xec, 0xf6, 0x89, 0x2f, 0x33, 0x81, 0xc2, 0xc3, 0x0d, 0x09, 0x28, 0xca, 0x57, 0x04, 0xfb, 0x67, 0x73, 0x59, 0x81, 0xa6, 0x64, 0x70, 0xb0, 0xea, 0x6e, 0x63, 0x64, 0xe8, 0x6a }) // %q() takes %d positional arguments but %d were given
TRANSLATION("Running in safe mode! Auto-reload is off.\n", 44, { 0xfa, 0xe5, 0x55, 0x17, 0x60, 0x8a, 0x20, 0xb5, 0x31, 0xbb, 0x58, 0xff, 0xd0, 0x7c, 0x33, 0x2d, 0xee, 0x73, 0xbb, 0x15, 0x82, 0x40, 0x6d, 0x75, 0xf0, 0xf5, 0xfa, 0x80 }) // Running in safe mode! Auto-reload is off.\r\n
TRANSLATION("Permission denied", 18, { 0xfa, 0x1b, 0xee, 0x91, 0x08, 0xca, 0x2c, 0x6a, 0x87, 0x60 }) // Permission denied
TRANSLATION("incorrect padding", 18, { 0x45, 0xab, 0x3b, 0x9d, 0x64, 0x60, 0xad, 0x64, 0x5d, 0x80 }) // incorrect padding
TRANSLATION("tuple/list has wrong length", 28, { 0x9c, 0xe2, 0xe7, 0xef, 0xba, 0x44, 0x8e, 0x65, 0x03, 0xab, 0xb2, 0xec, 0x2e, 0x6b, 0xb4, 0xf3 }) // tuple/list has wrong length
TRANSLATION("File exists", 12, { 0xfd, 0x12, 0xe6, 0x0f, 0xb2, 0x44, 0xc0 }) // File exists
TRANSLATION("Press any key to enter the REPL. Use CTRL-D to reload.", 55, { 0xfa, 0x39, 0xc4, 0x02, 0x5e, 0xe3, 0xcc, 0xfb, 0x89, 0x60, 0x6b, 0x26, 0xe2, 0x79, 0x98, 0xfa, 0xf2, 0xfa, 0x7e, 0xbe, 0x03, 0xf7, 0x83, 0x1f, 0x1f, 0xbf, 0xd7, 0xf5, 0xf7, 0x7e, 0x62, 0x58, 0x39, 0xdd, 0x8a, 0xde, 0x00 }) // Press any key to enter the REPL. Use CTRL-D to reload.
TRANSLATION("Splitting with sub-captures", 28, { 0xfb, 0x62, 0xe9, 0x32, 0x8b, 0xb0, 0xea, 0x93, 0xcc, 0x46, 0x74, 0xf7, 0x54, 0xb1, 0x39, 0x73, 0x80 }) // Splitting with sub-captures
TRANSLATION("abort() called", 15, { 0x2d, 0x19, 0xe7, 0xd9, 0xed, 0x15, 0x2b, 0xdc, 0xec }) // abort() called
TRANSLATION("Crash into the HardFault_Handler.\n", 36, { 0xf8, 0xb9, 0x47, 0x30, 0x8b, 0x2c, 0x27, 0x99, 0x8f, 0xfa, 0x27, 0xb7, 0xe8, 0x59, 0xbc, 0xd3, 0xfe, 0x89, 0x6d, 0x73, 0x7f, 0x0f, 0x5f, 0xa8 }) // Crash into the HardFault_Handler.\r\n
TRANSLATION("lhs and rhs should be compatible", 33, { 0xbf, 0x38, 0x04, 0xb6, 0x0f, 0xce, 0x04, 0x73, 0x6c, 0xde, 0xc3, 0x43, 0x15, 0x6d, 0xf0, 0x52, 0x9a, 0x5c, 0xc0 }) // lhs and rhs should be compatible
TRANSLATION("unreadable attribute", 21, { 0xca, 0xb9, 0x95, 0x8b, 0x4b, 0x98, 0x29, 0x97, 0x4d, 0x33, 0x26 }) // unreadable attribute
TRANSLATION("'%s' object does not support item deletion", 43, { 0xe3, 0xc2, 0x38, 0x86, 0xd3, 0xc8, 0xeb, 0x22, 0xcc, 0x70, 0x15, 0xa4, 0x46, 0x71, 0x86, 0x79, 0x09, 0x27, 0xb8, 0xb1, 0xdc, 0xe5, 0x19, 0x40 }) // \'%s\' object does not support item deletion
TRANSLATION("need more than %d values to unpack", 35, { 0x53, 0x3b, 0x0d, 0xd9, 0xcc, 0x4f, 0x32, 0x51, 0xc2, 0xc3, 0xa1, 0x5f, 0x27, 0x02, 0x58, 0x65, 0x70, 0x55, 0xf3 }) // need more than %d values to unpack
TRANSLATION("division by zero", 17, { 0xb2, 0x74, 0x48, 0x46, 0x51, 0xa7, 0x71, 0xfc, 0x1b, 0xb0 }) // division by zero
TRANSLATION("sign not allowed in string format specifier", 44, { 0x84, 0xd9, 0x42, 0xb4, 0x82, 0xbd, 0xdb, 0xa9, 0xd8, 0x22, 0x88, 0x97, 0x45, 0xd8, 0x6a, 0xcf, 0xb9, 0x48, 0x8c, 0x1d, 0x53, 0x54, 0x37 }) // sign not allowed in string format specifier
TRANSLATION("byte code not implemented", 26, { 0xd3, 0xbc, 0x98, 0xab, 0x58, 0xc2, 0xb4, 0x84, 0xdf, 0x17, 0x3d, 0xcd, 0x64, 0xec }) // byte code not implemented
TRANSLATION("function expected at most %d arguments, got %d", 47, { 0xd7, 0x2b, 0x59, 0x46, 0x50, 0x7d, 0xb0, 0x75, 0x93, 0xb0, 0x29, 0x1b, 0xb4, 0x48, 0xe1, 0x60, 0x4f, 0xb6, 0x77, 0x35, 0x98, 0xfc, 0x06, 0xcd, 0x23, 0x85, 0x80 }) // function expected at most %d arguments, got %d
TRANSLATION("unicode name escapes", 21, { 0xca, 0xa5, 0x5a, 0xc6, 0x14, 0xb7, 0x30, 0x71, 0x52, 0xc1, 0xc0 }) // unicode name escapes
TRANSLATION("%q index out of range", 22, { 0xe1, 0xe8, 0x11, 0x6c, 0x7d, 0x83, 0x66, 0x43, 0x6a, 0x1c, 0x97, 0x63 }) // %q index out of range
TRANSLATION("extra positional arguments given", 33, { 0x3e, 0xd2, 0xe4, 0x30, 0xd0, 0x92, 0x8c, 0xa5, 0x70, 0x4f, 0xb6, 0x77, 0x35, 0x98, 0x1b, 0x27, 0x43, 0x50 }) // extra positional arguments given
TRANSLATION("single '}' encountered in format string", 40, { 0x84, 0x5d, 0xae, 0x63, 0x8f, 0xff, 0x38, 0x83, 0x5a, 0xb6, 0x56, 0x4d, 0xce, 0xc1, 0x14, 0x6a, 0xcf, 0xb9, 0x48, 0x89, 0x74, 0x5d, 0x80 }) // single \'}\' encountered in format string
TRANSLATION("generator already executing", 28, { 0xd8, 0xd4, 0xdc, 0xa5, 0x9c, 0x15, 0xdc, 0xca, 0xdd, 0xc1, 0xf6, 0x3a, 0xe6, 0x51, 0x76 }) // generator already executing
TRANSLATION("can't set attribute", 20, { 0xa9, 0x2f, 0x19, 0x10, 0x72, 0x0a, 0x65, 0xd3, 0x4c, 0xc9, 0x80 }) // can\'t set attribute
TRANSLATION("unexpected keyword argument '%q'", 33, { 0xca, 0x9f, 0x6c, 0x1d, 0x64, 0xec, 0x3c, 0xcf, 0xbf, 0x56, 0x7b, 0x02, 0x7d, 0xb3, 0xb9, 0xac, 0x8e, 0x3c, 0x3d, 0x38, 0x80 }) // unexpected keyword argument \'%q\'
TRANSLATION("unmatched '{' in format", 24, { 0xca, 0xee, 0x53, 0x5e, 0x67, 0x61, 0xc7, 0xff, 0x7c, 0x42, 0x28, 0xd5, 0x9f, 0x72, 0x90 }) // unmatched \'{\' in format
TRANSLATION("format requires a dict", 23, { 0xd5, 0x9f, 0x72, 0x90, 0xe7, 0xe9, 0x94, 0x73, 0x80, 0x42, 0xc9, 0x59 }) // format requires a dict
TRANSLATION("super() can't find self", 24, { 0x8c, 0xe0, 0xdf, 0xd9, 0xed, 0x15, 0x25, 0xe3, 0x23, 0x54, 0x5b, 0x08, 0x3b, 0xea }) // super() can\'t find self
TRANSLATION("The microcontroller's power dipped. Please make sure your power supply provides\nenough power for the whole circuit and press reset (after ejecting CIRCUITPY).\n", 162, { 0xfb, 0xf3, 0x31, 0xba, 0x55, 0xda, 0xac, 0xb2, 0xed, 0x7b, 0x9b, 0xf1, 0x81, 0x86, 0xea, 0x6e, 0x2c, 0x98, 0xc1, 0xdb, 0xc0, 0x7d, 0x2e, 0x65, 0x06, 0x37, 0x2f, 0x33, 0x11, 0x97, 0x31, 0xdd, 0xb2, 0xe3, 0x0d, 0xd4, 0xdc, 0x46, 0x71, 0x8b, 0xf7, 0x18, 0x76, 0xe8, 0x96, 0x38, 0xf5, 0xfa, 0x8d, 0x5b, 0x3b, 0x73, 0x18, 0x6e, 0xa6, 0xe3, 0x56, 0x71, 0x3c, 0xcc, 0x75, 0xe6, 0xd7, 0x31, 0x54, 0x7a, 0xe5, 0x24, 0x12, 0xd8, 0x61, 0xce, 0x20, 0x39, 0xc1, 0xc8, 0xf6, 0x16, 0xb2, 0x6e, 0x0f, 0xc8, 0xeb, 0x28, 0xbb, 0x0f, 0x8f, 0xcb, 0xeb, 0xf1, 0xfd, 0xfe, 0x5f, 0x7f, 0xa7, 0xf9, 0xf6, 0xf8, 0x7a, 0xfd, 0x40 }) // The microcontroller\'s power dipped. Please make sure your power supply provides\r\nenough power for the whole circuit and press reset (after ejecting CIRCUITPY).\r\n
TRANSLATION("Length must be non-negative", 28, { 0xfd, 0x4d, 0x76, 0x9e, 0x63, 0x7c, 0xc4, 0x8d, 0x0c, 0x2b, 0x2f, 0xb9, 0x4f, 0x62, 0x94, 0xe8, 0x60 }) // Length must be non-negative
TRANSLATION("can't convert to int", 21, { 0xa9, 0x2f, 0x19, 0x15, 0x65, 0xe8, 0x6f, 0x22, 0x58, 0x22, 0xc8 }) // can\'t convert to int
TRANSLATION("can't have multiple *x", 23, { 0xa9, 0x2f, 0x19, 0x1c, 0xcb, 0xa1, 0x8d, 0xf3, 0x79, 0x4c, 0x5c, 0xc7, 0xf2, 0xec }) // can\'t have multiple *x
TRANSLATION("string index out of range", 26, { 0x89, 0x74, 0x5d, 0x82, 0x2d, 0x8f, 0xb0, 0x6c, 0xc8, 0x6d, 0x43, 0x92, 0xec, 0x60 }) // string index out of range
TRANSLATION("unknown format code '%c' for object of type '%s'", 49, { 0xca, 0xf9, 0xab, 0x75, 0x51, 0xab, 0x3e, 0xe5, 0x22, 0xad, 0x63, 0x1c, 0x78, 0x57, 0x88, 0xd5, 0x9c, 0x36, 0x9e, 0x47, 0x59, 0x0d, 0xa8, 0x9e, 0xf8, 0x31, 0xc7, 0x84, 0x71 }) // unknown format code \'%c\' for object of type \'%s\'
TRANSLATION("__init__() should return None, not '%s'", 40, { 0xa5, 0x11, 0x52, 0x69, 0x4f, 0x67, 0xb4, 0x47, 0x36, 0xcd, 0xec, 0x1c, 0xe7, 0x2e, 0xa3, 0xc5, 0x94, 0xff, 0x00, 0xad, 0x23, 0x8f, 0x08, 0xe2 }) // __init__() should return None, not \'%s\'
TRANSLATION("array/bytes required on right side", 35, { 0x27, 0x72, 0xef, 0xef, 0xd3, 0xbc, 0x9c, 0x07, 0x3f, 0x4c, 0xa3, 0x9d, 0x83, 0x28, 0x74, 0xdb, 0x9c, 0x88, 0x4b, 0x18 }) // array/bytes required on right side
TRANSLATION("Read-only filesystem", 21, { 0xfa, 0x99, 0x5b, 0xdc, 0xcb, 0x7e, 0xe3, 0x54, 0xb9, 0xc7, 0x78, 0x93, 0xdc }) // Read-only filesystem
TRANSLATION("popitem(): dictionary is empty", 31, { 0xc3, 0x61, 0x24, 0xf7, 0xf6, 0x7b, 0x7f, 0x11, 0x64, 0xac, 0xa3, 0x29, 0x3f, 0x70, 0x90, 0x0f, 0x7c, 0x4f, 0x70 }) // popitem(): dictionary is empty
TRANSLATION("can't delete expression", 24, { 0xa9, 0x2f, 0x19, 0x16, 0x3b, 0x9c, 0x98, 0x3e, 0xd8, 0x73, 0x88, 0x46, 0x50 }) // can\'t delete expression
TRANSLATION("bad typecode", 13, { 0xd0, 0xac, 0x27, 0xbe, 0x0e, 0xad, 0x63 }) // bad typecode
TRANSLATION("no binding for nonlocal found", 30, { 0x56, 0x1a, 0x22, 0xd9, 0x17, 0x61, 0xab, 0x38, 0x56, 0x5b, 0xb5, 0x4a, 0xe3, 0x56, 0xca, 0xd8 }) // no binding for nonlocal found
TRANSLATION("Unsupported operation", 22, { 0xfd, 0xd6, 0x33, 0x8c, 0x33, 0xc9, 0xd8, 0x36, 0x0d, 0xca, 0x51, 0x94 }) // Unsupported operation
TRANSLATION("Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.\n", 86, { 0xf8, 0x66, 0x5b, 0xdc, 0xe7, 0x76, 0x2b, 0x04, 0x80, 0xcb, 0xe0, 0x3e, 0xc9, 0xbe, 0x2f, 0xdc, 0x41, 0x74, 0x31, 0xaa, 0x5c, 0xe0, 0x37, 0x43, 0x71, 0xfb, 0xfd, 0xbf, 0x21, 0x2c, 0x1f, 0x2a, 0x27, 0x99, 0xee, 0x19, 0xc1, 0xac, 0x9b, 0x8f, 0xaf, 0x2f, 0xa7, 0xea, 0x25, 0x85, 0x92, 0x0b, 0x4b, 0x9f, 0x87, 0xaf, 0xd4 }) // Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.\r\n
TRANSLATION("The reset button was pressed while booting CircuitPython. Press again to exit safe mode.\n", 91, { 0xfb, 0xf3, 0x30, 0xe7, 0x07, 0x23, 0x4c, 0xcc, 0xb2, 0x8e, 0xa5, 0x03, 0x0e, 0x71, 0x07, 0x61, 0xd7, 0x9a, 0x5c, 0xc6, 0x8c, 0xd2, 0x8b, 0xb0, 0xf8, 0xa3, 0xd7, 0x29, 0x3f, 0x4e, 0xf3, 0xcd, 0x97, 0xc0, 0x7d, 0x1c, 0xe2, 0x01, 0x6c, 0x48, 0xa2, 0x58, 0x1f, 0x64, 0x91, 0x05, 0xa9, 0x8d, 0xda, 0xc7, 0xe1, 0xeb, 0xf5, 0x00 }) // The reset button was pressed while booting CircuitPython. Press again to exit safe mode.\r\n
TRANSLATION("empty separator", 16, { 0x3d, 0xf1, 0x3d, 0xc4, 0x1e, 0x09, 0xca, 0x59, 0xc0 }) // empty separator
TRANSLATION("arg is an empty sequence", 25, { 0x27, 0xd8, 0x24, 0x02, 0x50, 0x7b, 0xe2, 0x7b, 0x88, 0x3f, 0x4c, 0x9a, 0xd4, 0xc0 }) // arg is an empty sequence
TRANSLATION("bad conversion specifier", 25, { 0xd0, 0xac, 0x2a, 0xcb, 0xd0, 0xde, 0x11, 0x94, 0x46, 0x0e, 0xa9, 0xaa, 0x1b, 0x80 }) // bad conversion specifier
TRANSLATION("object is not subscriptable", 28, { 0x6d, 0x3c, 0x8e, 0xb2, 0x12, 0x02, 0xb4, 0x88, 0xce, 0x91, 0x57, 0x4c, 0x49, 0x69, 0x73 }) // object is not subscriptable
TRANSLATION("'%s' object is not callable", 28, { 0xe3, 0xc2, 0x38, 0x86, 0xd3, 0xc8, 0xeb, 0x21, 0x20, 0x2b, 0x48, 0xa9, 0x5e, 0xe5, 0xa5, 0xcc }) // \'%s\' object is not callable
TRANSLATION("expecting key:value for dict", 29, { 0x3e, 0xd8, 0x3a, 0xca, 0x2e, 0xc3, 0xcc, 0xfb, 0xfe, 0x3d, 0x0a, 0xf9, 0x31, 0xab, 0x38, 0xb2, 0x56, 0x40 }) // expecting key:value for dict
TRANSLATION("requested length %d but object has length %d", 45, { 0x73, 0xf4, 0xc9, 0xc4, 0x9d, 0x85, 0xcd, 0x76, 0x9e, 0x63, 0x85, 0x86, 0x99, 0x90, 0xda, 0x79, 0x1d, 0x64, 0x73, 0x28, 0x17, 0x35, 0xda, 0x79, 0x8e, 0x16 }) // requested length %d but object has length %d
TRANSLATION("I/O operation on closed file", 29, { 0xf9, 0x7b, 0xfe, 0x61, 0xb0, 0x6e, 0x52, 0x8c, 0xa1, 0x94, 0x56, 0xed, 0x07, 0x61, 0xaa, 0x5c, 0xc0 }) // I/O operation on closed file
TRANSLATION("integer required", 17, { 0x45, 0x93, 0xd8, 0xdc, 0x39, 0xfa, 0x65, 0x1c, 0xec }) // integer required
TRANSLATION("object does not support item deletion", 38, { 0x6d, 0x3c, 0x8e, 0xb2, 0x2c, 0xc7, 0x01, 0x5a, 0x44, 0x67, 0x18, 0x67, 0x90, 0x92, 0x7b, 0x8b, 0x1d, 0xce, 0x51, 0x94 }) // object does not support item deletion
TRANSLATION("multiple *x in assignment", 26, { 0xdf, 0x37, 0x94, 0xc5, 0xcc, 0x7f, 0x2e, 0xc1, 0x14, 0x14, 0x42, 0x6c, 0xbb, 0x9a, 0xc8 }) // multiple *x in assignment
TRANSLATION("object not an iterator", 23, { 0x6d, 0x3c, 0x8e, 0xb2, 0x15, 0xa4, 0x12, 0x84, 0x93, 0x72, 0x96, 0x70 }) // object not an iterator
TRANSLATION("overflow converting long int to machine word", 45, { 0x6e, 0x86, 0xfa, 0xdd, 0xba, 0x8a, 0xb2, 0xf4, 0x37, 0x94, 0x5d, 0x85, 0xd9, 0x76, 0x08, 0xb2, 0x25, 0x86, 0xe5, 0x5e, 0x68, 0xa6, 0x3a, 0xb3, 0xd8 }) // overflow converting long int to machine word
TRANSLATION("multiple bases have instance lay-out conflict", 46, { 0xdf, 0x37, 0x94, 0xc5, 0xcc, 0x68, 0x50, 0x70, 0x39, 0x97, 0x43, 0x08, 0xb1, 0x24, 0xb5, 0x31, 0x72, 0xef, 0xee, 0x6c, 0xc8, 0xab, 0x2e, 0xb7, 0x4a, 0xc8 }) // multiple bases have instance lay-out conflict
TRANSLATION("0.0 to a complex power", 23, { 0xfe, 0x7e, 0x1f, 0xcc, 0x4b, 0x02, 0x15, 0x6d, 0xf1, 0x73, 0xec, 0x30, 0xdd, 0x4d, 0xc0 }) // 0.0 to a complex power
TRANSLATION("start/end indices", 18, { 0x89, 0x27, 0x9f, 0x79, 0xad, 0x82, 0x2d, 0x92, 0xa7, 0x00 }) // start/end indices
TRANSLATION("MicroPython fatal error.\n", 27, { 0xfd, 0x92, 0xae, 0xdf, 0x4e, 0xf3, 0xcd, 0x94, 0x6a, 0x52, 0x57, 0x06, 0xee, 0xcf, 0xe1, 0xeb, 0xf5, 0x00 }) // MicroPython fatal error.\r\n
TRANSLATION("end of format while looking for conversion specifier", 53, { 0x35, 0xb0, 0x6d, 0x46, 0xac, 0xfb, 0x94, 0x8e, 0xbc, 0xd2, 0xe6, 0x2e, 0xcd, 0xe6, 0x8b, 0xb0, 0xd5, 0x9c, 0x55, 0x97, 0xa1, 0xbc, 0x23, 0x28, 0x8c, 0x1d, 0x53, 0x54, 0x37 }) // end of format while looking for conversion specifier
TRANSLATION("No space left on device", 24, { 0xf1, 0x61, 0x18, 0x2a, 0x98, 0xb9, 0xeb, 0x21, 0x94, 0x58, 0xfa, 0x25, 0x4c }) // No space left on device
TRANSLATION("can't convert to float", 23, { 0xa9, 0x2f, 0x19, 0x15, 0x65, 0xe8, 0x6f, 0x22, 0x58, 0x6b, 0x76, 0x29 }) // can\'t convert to float
TRANSLATION("USB Error", 10, { 0xfd, 0xfe, 0xdf, 0x90, 0xe4, 0xee, 0xce }) // USB Error
TRANSLATION("unsupported type for operator", 30, { 0xca, 0xc6, 0x71, 0x86, 0x79, 0x3b, 0x09, 0xef, 0x83, 0x1a, 0xb3, 0x86, 0xc1, 0xb9, 0x4b, 0x38 }) // unsupported type for operator
TRANSLATION("small int overflow", 19, { 0x8d, 0xca, 0xf7, 0x08, 0xb2, 0x1b, 0xa1, 0xbe, 0xb7, 0x6e, 0xa0 }) // small int overflow
TRANSLATION("not enough arguments for format string", 39, { 0x56, 0x90, 0x6a, 0xd9, 0xdb, 0x98, 0x27, 0xdb, 0x3b, 0x9a, 0xcc, 0x0d, 0x59, 0xc6, 0xac, 0xfb, 0x94, 0x88, 0x97, 0x45, 0xd8 }) // not enough arguments for format string
TRANSLATION("default 'except' must be last", 30, { 0xb1, 0xea, 0x59, 0xbc, 0x8e, 0x27, 0xda, 0xa7, 0x89, 0xe2, 0x37, 0xcc, 0x48, 0xd0, 0xc5, 0xca, 0x24 }) // default \'except\' must be last
TRANSLATION("function does not take keyword arguments", 41, { 0xd7, 0x2b, 0x59, 0x46, 0x51, 0x66, 0x38, 0x0a, 0xd2, 0x24, 0xbc, 0xcc, 0x79, 0x9f, 0x7e, 0xac, 0xf6, 0x04, 0xfb, 0x67, 0x73, 0x59, 0x80 }) // function does not take keyword arguments
TRANSLATION("unknown conversion specifier %c", 32, { 0xca, 0xf9, 0xab, 0x75, 0x51, 0x56, 0x5e, 0x86, 0xf0, 0x8c, 0xa2, 0x30, 0x75, 0x4d, 0x50, 0xdc, 0x70, 0xa8 }) // unknown conversion specifier %c
TRANSLATION("*x must be assignment target", 29, { 0xfe, 0x5d, 0x86, 0xf9, 0x89, 0x1a, 0x18, 0x28, 0x84, 0xd9, 0x77, 0x35, 0x91, 0x24, 0xfb, 0x1c, 0x80 }) // *x must be assignment target
TRANSLATION("can't convert to complex", 25, { 0xa9, 0x2f, 0x19, 0x15, 0x65, 0xe8, 0x6f, 0x22, 0x58, 0x55, 0xb7, 0xc5, 0xcf, 0xb0 }) // can\'t convert to complex
TRANSLATION("Object has been deinitialized and can no longer be used. Create a new object.", 78, { 0xf9, 0xe9, 0xe4, 0x75, 0x91, 0xcc, 0xa0, 0x68, 0x66, 0xa2, 0xc6, 0x8a, 0x92, 0x85, 0x74, 0xfe, 0x0e, 0xc0, 0x96, 0xc2, 0xa4, 0xa1, 0x58, 0x5d, 0x97, 0x63, 0x71, 0xa1, 0x8c, 0xc1, 0xdb, 0xc0, 0x7c, 0x5c, 0xca, 0x4c, 0x10, 0x53, 0xea, 0x1b, 0x4f, 0x23, 0xac, 0xf8, 0x00 }) // Object has been deinitialized and can no longer be used. Create a new object.
TRANSLATION("function missing required positional argument #%d", 50, { 0xd7, 0x2b, 0x59, 0x46, 0x51, 0xba, 0x44, 0x22, 0xec, 0x1c, 0xfd, 0x32, 0x8e, 0x76, 0x18, 0x68, 0x49, 0x46, 0x52, 0xb8, 0x27, 0xdb, 0x3b, 0x9a, 0xc8, 0xff, 0x6e, 0x16 }) // function missing required positional argument #%d
TRANSLATION("stream operation not supported", 31, { 0x89, 0x73, 0x2d, 0xc3, 0x60, 0xdc, 0xa5, 0x19, 0x42, 0xb4, 0x88, 0xce, 0x30, 0xcf, 0x27, 0x60 }) // stream operation not supported
TRANSLATION("index out of range", 19, { 0x45, 0xb1, 0xf6, 0x0d, 0x99, 0x0d, 0xa8, 0x72, 0x5d, 0x8c }) // index out of range
TRANSLATION("can't switch from manual field specification to automatic field numbering", 74, { 0xa9, 0x2f, 0x19, 0x11, 0xd5, 0x26, 0xbc, 0xc6, 0xae, 0xdb, 0x8d, 0xc9, 0x72, 0x57, 0x1a, 0xa1, 0xde, 0xc2, 0x30, 0x75, 0x4d, 0x52, 0xa5, 0x28, 0xca, 0x25, 0x81, 0x66, 0x5b, 0x72, 0x94, 0xa8, 0xd5, 0x0e, 0xf6, 0x0b, 0x9d, 0xf4, 0x37, 0x45, 0xd8 }) // can\'t switch from manual field specification to automatic field numbering
TRANSLATION("non-keyword arg after keyword arg", 34, { 0x56, 0x5f, 0x77, 0x99, 0xf7, 0xea, 0xcf, 0x60, 0x4f, 0xb0, 0x2d, 0x64, 0xdc, 0x79, 0x9f, 0x7e, 0xac, 0xf6, 0x04, 0xfb, 0x00 }) // non-keyword arg after keyword arg
TRANSLATION("issubclass() arg 1 must be a class", 35, { 0x48, 0x8c, 0xe9, 0x5b, 0x94, 0x47, 0xb3, 0xda, 0x09, 0xf6, 0x1f, 0xd0, 0x6f, 0x98, 0x91, 0xa1, 0x82, 0x15, 0xb9, 0x44, 0x00 }) // issubclass() arg 1 must be a class
TRANSLATION("substring not found", 20, { 0x8c, 0xe9, 0x12, 0xe8, 0xbb, 0x05, 0x69, 0x1a, 0xb6, 0x56, 0xc0 }) // substring not found
TRANSLATION("'break' outside loop", 21, { 0xe3, 0xa3, 0x99, 0x79, 0xf1, 0x0d, 0x99, 0x84, 0xb1, 0x8b, 0xb3, 0x60 }) // \'break\' outside loop
TRANSLATION("invalid micropython decorator", 30, { 0x45, 0xe8, 0x57, 0x4b, 0x0d, 0xd2, 0xae, 0xd8, 0xef, 0x3c, 0xd9, 0x45, 0x8e, 0xac, 0xe5, 0x2c, 0xe0 }) // invalid micropython decorator
TRANSLATION("keywords must be strings", 25, { 0xf3, 0x3e, 0xfd, 0x59, 0xed, 0x03, 0x7c, 0xc4, 0x8d, 0x0c, 0x44, 0xba, 0x2e, 0xd0 }) // keywords must be strings
TRANSLATION("indices must be integers", 25, { 0x45, 0xb2, 0x54, 0xe0, 0x6f, 0x98, 0x91, 0xa1, 0x84, 0x59, 0x3d, 0x8d, 0xe0 }) // indices must be integers
TRANSLATION("memory allocation failed, allocating %u bytes", 46, { 0xdc, 0xf7, 0x67, 0xee, 0x0a, 0xf7, 0x6a, 0x94, 0xa3, 0x28, 0xd4, 0x92, 0xe7, 0x6f, 0xc0, 0x15, 0xee, 0xd5, 0x29, 0x45, 0xd8, 0x70, 0xc8, 0xd3, 0xbc, 0x9c, 0x00 }) // memory allocation failed, allocating %u bytes
TRANSLATION("name reused for argument", 25, { 0x52, 0xdc, 0xc3, 0x9e, 0x60, 0xec, 0x35, 0x67, 0x04, 0xfb, 0x67, 0x73, 0x59 }) // name reused for argument
TRANSLATION("function missing %d required positional arguments", 50, { 0xd7, 0x2b, 0x59, 0x46, 0x51, 0xba, 0x44, 0x22, 0xec, 0x38, 0x58, 0x39, 0xfa, 0x65, 0x1c, 0xec, 0x30, 0xd0, 0x92, 0x8c, 0xa5, 0x70, 0x4f, 0xb6, 0x77, 0x35, 0x98 }) // function missing %d required positional arguments
TRANSLATION("MicroPython NLR jump failed. Likely memory corruption.\n", 57, { 0xfd, 0x92, 0xae, 0xdf, 0x4e, 0xf3, 0xcd, 0x94, 0x78, 0xfe, 0xbf, 0x51, 0xe5, 0x9d, 0xf0, 0x35, 0x24, 0xb9, 0xdb, 0xc0, 0x7e, 0xa9, 0xe6, 0x77, 0xee, 0x37, 0x3d, 0xd9, 0xfb, 0x8a, 0xb3, 0xbe, 0x71, 0x28, 0xcb, 0xe1, 0xeb, 0xf5, 0x00 }) // MicroPython NLR jump failed. Likely memory corruption.\r\n
TRANSLATION("'return' outside function", 26, { 0xe2, 0xe7, 0x39, 0x75, 0xe2, 0x1b, 0x33, 0x09, 0x63, 0x1a, 0xe5, 0x6b, 0x28, 0xca }) // \'return\' outside function
TRANSLATION("can't convert to str implicitly", 32, { 0xa9, 0x2f, 0x19, 0x15, 0x65, 0xe8, 0x6f, 0x22, 0x58, 0x44, 0xb8, 0x4d, 0xf1, 0x74, 0xaa, 0x4d, 0xfb, 0x80 }) // can\'t convert to str implicitly
TRANSLATION("too many values to unpack (expected %d)", 40, { 0x96, 0x61, 0xb9, 0x2f, 0x71, 0xd0, 0xaf, 0x93, 0x81, 0x2c, 0x32, 0xb8, 0x2a, 0xf9, 0x8f, 0x61, 0xf6, 0xc1, 0xd6, 0x4e, 0xc3, 0x85, 0xbd, 0xa0 }) // too many values to unpack (expected %d)
TRANSLATION("Error in regex", 15, { 0xe4, 0xee, 0xce, 0x11, 0x43, 0x9e, 0xc7, 0xd8 }) // Error in regex
TRANSLATION("unsupported type for %q: '%s'", 30, { 0xca, 0xc6, 0x71, 0x86, 0x79, 0x3b, 0x09, 0xef, 0x83, 0x1a, 0xb3, 0x8e, 0x1e, 0x9f, 0x88, 0xe3, 0xc2, 0x38, 0x80 }) // unsupported type for %q: \'%s\'
TRANSLATION("can't send non-None value to a just-started generator", 54, { 0xa9, 0x2f, 0x19, 0x10, 0x6b, 0x60, 0xac, 0xbe, 0xef, 0x16, 0x53, 0x1d, 0x0a, 0xf9, 0x31, 0x2c, 0x08, 0x79, 0x66, 0x27, 0xdd, 0x12, 0x4f, 0x27, 0x61, 0xb1, 0xa9, 0xb9, 0x4b, 0x38 }) // can\'t send non-None value to a just-started generator
TRANSLATION("not all arguments converted during string formatting", 53, { 0x56, 0x90, 0x57, 0xb8, 0x27, 0xdb, 0x3b, 0x9a, 0xcc, 0x0a, 0xb2, 0xf4, 0x37, 0x93, 0xb0, 0xb6, 0x5d, 0x17, 0x61, 0x12, 0xe8, 0xbb, 0x0d, 0x59, 0xf7, 0x29, 0x94, 0x5d, 0x80 }) // not all arguments converted during string formatting
TRANSLATION("function missing required keyword argument '%q'", 48, { 0xd7, 0x2b, 0x59, 0x46, 0x51, 0xba, 0x44, 0x22, 0xec, 0x1c, 0xfd, 0x32, 0x8e, 0x76, 0x1e, 0x67, 0xdf, 0xab, 0x3d, 0x81, 0x3e, 0xd9, 0xdc, 0xd6, 0x47, 0x1e, 0x1e, 0x9c, 0x40 }) // function missing required keyword argument \'%q\'
TRANSLATION("unexpected indent", 18, { 0xca, 0x9f, 0x6c, 0x1d, 0x64, 0xec, 0x11, 0x6c, 0x6b, 0x20 }) // unexpected indent
TRANSLATION("Auto-reload is off.\n", 22, { 0xf8, 0x66, 0x5b, 0xdc, 0xe7, 0x76, 0x2b, 0x04, 0x80, 0xda, 0xeb, 0xe1, 0xeb, 0xf5, 0x00 }) // Auto-reload is off.\r\n
TRANSLATION("'%s' object is not subscriptable", 33, { 0xe3, 0xc2, 0x38, 0x86, 0xd3, 0xc8, 0xeb, 0x21, 0x20, 0x2b, 0x48, 0x8c, 0xe9, 0x15, 0x74, 0xc4, 0x96, 0x97, 0x30 }) // \'%s\' object is not subscriptable
TRANSLATION("generator ignored GeneratorExit", 32, { 0xd8, 0xd4, 0xdc, 0xa5, 0x9c, 0x26, 0xca, 0xce, 0x76, 0x1f, 0xdc, 0xd4, 0xdc, 0xa5, 0x9f, 0x97, 0x64, 0x90 }) // generator ignored GeneratorExit
TRANSLATION("can't pend throw to just-started generator", 43, { 0xa9, 0x2f, 0x19, 0x18, 0x35, 0xb0, 0x9e, 0x6e, 0xdd, 0x44, 0xb0, 0xf2, 0xcc, 0x4f, 0xba, 0x24, 0x9e, 0x4e, 0xc3, 0x63, 0x53, 0x72, 0x96, 0x70 }) // can\'t pend throw to just-started generator
TRANSLATION("can't declare nonlocal in outer code", 37, { 0xa9, 0x2f, 0x19, 0x16, 0x3a, 0xdc, 0x9c, 0xc2, 0xb2, 0xdd, 0xaa, 0x57, 0x08, 0xa1, 0xb3, 0x26, 0xe2, 0xad, 0x63 }) // can\'t declare nonlocal in outer code
TRANSLATION("Attempted heap allocation when MicroPython VM not running.\n", 61, { 0xf8, 0x4c, 0x9e, 0xf8, 0x93, 0xb0, 0xe6, 0x65, 0x80, 0x57, 0xbb, 0x54, 0xa5, 0x19, 0x47, 0x5e, 0x66, 0xa3, 0xf6, 0x4a, 0xbb, 0x7d, 0x3b, 0xcf, 0x36, 0x51, 0xfe, 0x3f, 0x60, 0xad, 0x21, 0xf2, 0xaa, 0x8b, 0xb7, 0x87, 0xaf, 0xd4 }) // Attempted heap allocation when MicroPython VM not running.\r\n
TRANSLATION("incomplete format key", 22, { 0x45, 0xab, 0x6f, 0x8b, 0x9c, 0x98, 0xd5, 0x9f, 0x72, 0x91, 0xe6, 0x7d, 0xc0 }) // incomplete format key
TRANSLATION("type object '%q' has no attribute '%q'", 39, { 0x9e, 0xf8, 0x30, 0xda, 0x79, 0x1d, 0x64, 0x71, 0xe1, 0xe9, 0xc4, 0x73, 0x28, 0x0a, 0xc0, 0xa6, 0x5d, 0x34, 0xcc, 0x98, 0xe3, 0xc3, 0xd3, 0x88 }) // type object \'%q\' has no attribute \'%q\'
TRANSLATION("function missing keyword-only argument", 39, { 0xd7, 0x2b, 0x59, 0x46, 0x51, 0xba, 0x44, 0x22, 0xec, 0x3c, 0xcf, 0xbf, 0x56, 0x7b, 0x7b, 0x99, 0x6f, 0xdc, 0x13, 0xed, 0x9d, 0xcd, 0x64 }) // function missing keyword-only argument
TRANSLATION("incomplete format", 18, { 0x45, 0xab, 0x6f, 0x8b, 0x9c, 0x98, 0xd5, 0x9f, 0x72, 0x90 }) // incomplete format
TRANSLATION("object not callable", 20, { 0x6d, 0x3c, 0x8e, 0xb2, 0x15, 0xa4, 0x54, 0xaf, 0x72, 0xd2, 0xe6 }) // object not callable
TRANSLATION("Plus any modules on the filesystem\n", 37, { 0xfa, 0x5f, 0x30, 0x09, 0x7b, 0x8d, 0xda, 0xd9, 0xb9, 0xc0, 0x65, 0x13, 0xcc, 0xc6, 0xa9, 0x73, 0x8e, 0xf1, 0x27, 0xbf, 0xaf, 0xd4 }) // Plus any modules on the filesystem\r\n
TRANSLATION("'continue' outside loop", 24, { 0xe3, 0x56, 0x59, 0x45, 0xc9, 0xf1, 0x0d, 0x99, 0x84, 0xb1, 0x8b, 0xb3, 0x60 }) // \'continue\' outside loop
TRANSLATION("You are running in safe mode which means something unanticipated happened.\n", 77, { 0xff, 0x2d, 0x90, 0x4e, 0x61, 0xf2, 0xaa, 0x8b, 0xb0, 0x45, 0x10, 0x5a, 0x98, 0xdd, 0xac, 0x63, 0xaf, 0x34, 0xaf, 0x31, 0xb9, 0x92, 0xc0, 0x86, 0xdc, 0xe7, 0x9a, 0x2e, 0xc3, 0x2a, 0x4b, 0x29, 0x54, 0xc1, 0x49, 0xd8, 0x73, 0x2c, 0x60, 0xd4, 0xed, 0xe1, 0xeb, 0xf5, 0x00 }) // You are running in safe mode which means something unanticipated happened.\r\n
TRANSLATION("constant must be an integer", 28, { 0xab, 0x2c, 0x49, 0x2c, 0x8d, 0xf3, 0x12, 0x34, 0x30, 0x4a, 0x11, 0x64, 0xf6, 0x37 }) // constant must be an integer
TRANSLATION("The `microcontroller` module was used to boot into safe mode. Press reset to exit safe mode.\n", 95, { 0xfb, 0xf3, 0x31, 0xff, 0x9b, 0xa5, 0x5d, 0xaa, 0xcb, 0x2e, 0xd7, 0xb9, 0xbf, 0xfe, 0x0d, 0xda, 0xd9, 0xb9, 0x8e, 0xa5, 0x03, 0x30, 0x76, 0x12, 0xc3, 0x46, 0x69, 0x08, 0xb2, 0xc2, 0x0b, 0x53, 0x1b, 0xb5, 0x8f, 0xc0, 0x7d, 0x1c, 0xe2, 0x03, 0x9c, 0x1c, 0x89, 0x60, 0x7d, 0x92, 0x44, 0x16, 0xa6, 0x37, 0x6b, 0x1f, 0x87, 0xaf, 0xd4 }) // The `microcontroller` module was used to boot into safe mode. Press reset to exit safe mode.\r\n
TRANSLATION("Welcome to Adafruit CircuitPython %s!\n\nPlease visit learn.adafruit.com/category/circuitpython for project guides.\n\nTo list built-in modules please do `help(\"modules\")`.\n", 175, { 0xff, 0xb3, 0xbd, 0x5b, 0x73, 0x12, 0xc3, 0xe1, 0x62, 0xd5, 0xf2, 0x92, 0x3e, 0x28, 0xf5, 0xca, 0x4f, 0xd3, 0xbc, 0xf3, 0x65, 0x1c, 0x23, 0xfd, 0x3d, 0x7e, 0xaf, 0x5f, 0xab, 0xe9, 0x73, 0x28, 0x31, 0xd1, 0x21, 0x24, 0x5c, 0xc9, 0xd7, 0xc0, 0xac, 0x5a, 0xbe, 0x52, 0x7c, 0x2a, 0xdb, 0xfb, 0xea, 0x52, 0x7b, 0x33, 0xf7, 0xf7, 0xd5, 0x1e, 0xb9, 0x49, 0xc7, 0x79, 0xe6, 0xca, 0x35, 0x67, 0x18, 0x76, 0xf2, 0x3a, 0xc8, 0xdb, 0x29, 0x63, 0x8f, 0x0f, 0x5f, 0xab, 0xd7, 0xea, 0xfb, 0xb0, 0xba, 0x44, 0x8d, 0x32, 0x97, 0x9f, 0x72, 0x28, 0xdd, 0xad, 0x9b, 0x9c, 0x0c, 0x5c, 0xca, 0x0c, 0x59, 0x87, 0xfe, 0x73, 0x3b, 0xe3, 0xd9, 0xfe, 0xbb, 0xb5, 0xb3, 0x73, 0x8f, 0xf5, 0xf6, 0xff, 0xe7, 0x87, 0xaf, 0xd4 }) // Welcome to Adafruit CircuitPython %s!\r\n\r\nPlease visit learn.adafruit.com/category/circuitpython for project guides.\r\n\r\nTo list built-in modules please do `help(\"modules\")`.\r\n
TRANSLATION("'%s' object does not support item assignment", 45, { 0xe3, 0xc2, 0x38, 0x86, 0xd3, 0xc8, 0xeb, 0x22, 0xcc, 0x70, 0x15, 0xa4, 0x46, 0x71, 0x86, 0x79, 0x09, 0x27, 0xb8, 0x28, 0x84, 0xd9, 0x77, 0x35, 0x90 }) // \'%s\' object does not support item assignment
TRANSLATION("Cannot subclass slice", 22, { 0xf8, 0x92, 0xab, 0x48, 0x8c, 0xe9, 0x5b, 0x94, 0x40, 0x8b, 0xa5, 0x4c }) // Cannot subclass slice
TRANSLATION("invalid format specifier", 25, { 0x45, 0xe8, 0x57, 0x4b, 0x0d, 0x59, 0xf7, 0x29, 0x11, 0x83, 0xaa, 0x6a, 0x86, 0xe0 }) // invalid format specifier
TRANSLATION("cannot create instance", 23, { 0xa9, 0x2a, 0xb4, 0x8a, 0xb9, 0x94, 0x98, 0x45, 0x89, 0x25, 0xa9, 0x80 }) // cannot create instance
TRANSLATION("  File \"%q\", line %d", 21, { 0x03, 0xf4, 0x4b, 0x98, 0xff, 0x5e, 0x1e, 0x9f, 0xeb, 0xf8, 0x0b, 0xa2, 0x98, 0xe1, 0x60 }) //   File \"%q\", line %d
TRANSLATION("'%q' argument required", 23, { 0xe3, 0xc3, 0xd3, 0x88, 0x27, 0xdb, 0x3b, 0x9a, 0xc8, 0x73, 0xf4, 0xca, 0x39, 0xd8 }) // \'%q\' argument required
TRANSLATION("function takes %d positional arguments but %d were given", 57, { 0xd7, 0x2b, 0x59, 0x46, 0x51, 0x25, 0xe6, 0x70, 0x38, 0x58, 0x61, 0xa1, 0x25, 0x19, 0x4a, 0xe0, 0x9f, 0x6c, 0xee, 0x6b, 0x30, 0x34, 0xcc, 0x8e, 0x16, 0x1d, 0x4d, 0xcc, 0x6c, 0x9d, 0x0d, 0x40 }) // function takes %d positional arguments but %d were given
TRANSLATION("cannot perform relative import", 31, { 0xa9, 0x2a, 0xb4, 0x8c, 0x1b, 0xea, 0xcf, 0xb8, 0x73, 0xb9, 0x4a, 0x74, 0x30, 0x9b, 0xe1, 0x9e, 0x40 }) // cannot perform relative import
TRANSLATION("can't convert %s to complex", 28, { 0xa9, 0x2f, 0x19, 0x15, 0x65, 0xe8, 0x6f, 0x23, 0x84, 0x09, 0x61, 0x56, 0xdf, 0x17, 0x3e, 0xc0 }) // can\'t convert %s to complex
TRANSLATION("int() arg 2 must be >= 2 and <= 36", 35, { 0x45, 0x9f, 0x67, 0xb4, 0x13, 0xec, 0x3f, 0xdc, 0x6f, 0x98, 0x91, 0xa1, 0x8f, 0xed, 0xff, 0x23, 0xfd, 0xc1, 0x2d, 0x87, 0xf5, 0xff, 0x91, 0xff, 0x1f, 0xfd, 0x00 }) // int() arg 2 must be >= 2 and <= 36
TRANSLATION("type '%q' is not an acceptable base type", 41, { 0x9e, 0xf8, 0x31, 0xc7, 0x87, 0xa7, 0x10, 0x90, 0x15, 0xa4, 0x12, 0x82, 0xad, 0x4f, 0x12, 0x5a, 0x5c, 0xc6, 0x85, 0x06, 0x27, 0xbe, 0x0c }) // type \'%q\' is not an acceptable base type
TRANSLATION("invalid syntax for integer", 27, { 0x45, 0xe8, 0x57, 0x4b, 0x08, 0xee, 0xb2, 0x5d, 0x86, 0xac, 0xe1, 0x16, 0x4f, 0x63, 0x70 }) // invalid syntax for integer
TRANSLATION("'%s' object is not an iterator", 31, { 0xe3, 0xc2, 0x38, 0x86, 0xd3, 0xc8, 0xeb, 0x21, 0x20, 0x2b, 0x48, 0x25, 0x09, 0x26, 0xe5, 0x2c, 0xe0 }) // \'%s\' object is not an iterator
TRANSLATION("local variable referenced before assignment", 44, { 0xbb, 0x54, 0xae, 0x3a, 0x13, 0xa1, 0x69, 0x73, 0x0e, 0x7a, 0x9b, 0x9a, 0xd4, 0xec, 0x34, 0x3d, 0x59, 0xcc, 0x14, 0x42, 0x6c, 0xbb, 0x9a, 0xc8 }) // local variable referenced before assignment
TRANSLATION("can't assign to expression", 27, { 0xa9, 0x2f, 0x19, 0x05, 0x10, 0x9b, 0x28, 0x96, 0x07, 0xdb, 0x0e, 0x71, 0x08, 0xca }) // can\'t assign to expression
TRANSLATION("function got multiple values for argument '%q'", 47, { 0xd7, 0x2b, 0x59, 0x46, 0x51, 0xb3, 0x48, 0xdf, 0x37, 0x94, 0xc5, 0xcc, 0x74, 0x2b, 0xe4, 0xe0, 0x6a, 0xce, 0x09, 0xf6, 0xce, 0xe6, 0xb2, 0x38, 0xf0, 0xf4, 0xe2 }) // function got multiple values for argument \'%q\'
TRANSLATION("only slices with step=1 (aka None) are supported", 49, { 0x65, 0xbf, 0x71, 0x17, 0x4a, 0x9c, 0x0e, 0xa9, 0x3c, 0xc4, 0x49, 0xe3, 0xfe, 0x7f, 0xa0, 0xf6, 0x17, 0x99, 0x0f, 0x16, 0x53, 0xf6, 0x82, 0x73, 0x11, 0x9c, 0x61, 0x9e, 0x4e, 0xc0 }) // only slices with step=1 (aka None) are supported
TRANSLATION("offset out of bounds", 21, { 0x6d, 0x75, 0x83, 0x90, 0xd9, 0x90, 0xda, 0x8d, 0x1b, 0x2b, 0x68 }) // offset out of bounds
TRANSLATION("\nCode done running. Waiting for reload.\n", 43, { 0xf5, 0xfa, 0xbe, 0x2d, 0x63, 0x16, 0x65, 0x30, 0xf9, 0x55, 0x45, 0xdb, 0xc0, 0x7f, 0xd9, 0x24, 0xa2, 0xec, 0x35, 0x67, 0x0e, 0x77, 0x62, 0xb7, 0x87, 0xaf, 0xd4 }) // \r\nCode done running. Waiting for reload.\r\n
TRANSLATION("argument has wrong type", 24, { 0x27, 0xdb, 0x3b, 0x9a, 0xc8, 0xe6, 0x50, 0x3a, 0xbb, 0x2e, 0xc2, 0x7b, 0xe0, 0xc0 }) // argument has wrong type
TRANSLATION("module not found", 17, { 0xdd, 0xad, 0x9b, 0x98, 0x56, 0x91, 0xab, 0x65, 0x6c }) // module not found
TRANSLATION("'=' alignment not allowed in string format specifier", 53, { 0xe3, 0xff, 0x3c, 0x41, 0x5d, 0x36, 0x5d, 0xcd, 0x64, 0x2b, 0x48, 0x2b, 0xdd, 0xba, 0x9d, 0x82, 0x28, 0x89, 0x74, 0x5d, 0x86, 0xac, 0xfb, 0x94, 0x88, 0xc1, 0xd5, 0x35, 0x43, 0x70 }) // \'=\' alignment not allowed in string format specifier
TRANSLATION("Input/output error", 19, { 0xf9, 0x2e, 0x33, 0x3e, 0xf6, 0xcc, 0xe3, 0x32, 0x0d, 0xdd, 0x9c }) // Input/output error
TRANSLATION("memory allocation failed, heap is locked", 41, { 0xdc, 0xf7, 0x67, 0xee, 0x0a, 0xf7, 0x6a, 0x94, 0xa3, 0x28, 0xd4, 0x92, 0xe7, 0x6f, 0xc0, 0x73, 0x32, 0xc0, 0x48, 0x17, 0x6a, 0xf9, 0x9d, 0x80 }) // memory allocation failed, heap is locked
TRANSLATION("cannot import name %q", 22, { 0xa9, 0x2a, 0xb4, 0x84, 0xdf, 0x0c, 0xf2, 0x14, 0xb7, 0x31, 0xc3, 0xd0 }) // cannot import name %q
TRANSLATION("can't add special method to already-subclassed class", 53, { 0xa9, 0x2f, 0x19, 0x05, 0x6b, 0x08, 0xc1, 0xd5, 0x0a, 0xe3, 0x73, 0x9e, 0x6d, 0x61, 0x2c, 0x0a, 0xee, 0x65, 0x6e, 0xfe, 0xe8, 0xce, 0x95, 0xb9, 0x44, 0x1d, 0x85, 0x6e, 0x51, 0x00 }) // can\'t add special method to already-subclassed class
TRANSLATION("%%c requires int or char", 25, { 0xe1, 0xc2, 0xa1, 0xcf, 0xd3, 0x28, 0xe7, 0x01, 0x16, 0x43, 0x38, 0xaf, 0x32, 0x70 }) // %%c requires int or char
TRANSLATION("identifier redefined as global", 31, { 0x4b, 0x1a, 0xca, 0x6a, 0x86, 0xe1, 0xce, 0xc7, 0xaa, 0x29, 0xd8, 0x14, 0x0d, 0xae, 0xda, 0x15, 0xc0 }) // identifier redefined as global
TRANSLATION("USB Busy", 9, { 0xfd, 0xfe, 0xdf, 0x90, 0xfc, 0xb3, 0x1d, 0xc0 }) // USB Busy
TRANSLATION("object with buffer protocol required", 37, { 0x6d, 0x3c, 0x8e, 0xb2, 0x3a, 0xa4, 0xf3, 0x1a, 0x67, 0x5d, 0x4d, 0xc6, 0x1d, 0xa5, 0xaa, 0xd7, 0x0e, 0x7e, 0x99, 0x47, 0x3b, 0x00 }) // object with buffer protocol required
TRANSLATION("ord() expected a character, but string of length %d found", 58, { 0x67, 0xb7, 0xb3, 0xda, 0x0f, 0xb6, 0x0e, 0xb2, 0x76, 0x04, 0x2b, 0xcc, 0x9c, 0xab, 0x26, 0xff, 0x80, 0xd3, 0x32, 0x22, 0x5d, 0x17, 0x60, 0xda, 0x8b, 0x9a, 0xed, 0x3c, 0xc7, 0x0b, 0x0d, 0x5b, 0x2b, 0x60 }) // ord() expected a character, but string of length %d found
TRANSLATION("unknown format code '%c' for object of type 'str'", 50, { 0xca, 0xf9, 0xab, 0x75, 0x51, 0xab, 0x3e, 0xe5, 0x22, 0xad, 0x63, 0x1c, 0x78, 0x57, 0x88, 0xd5, 0x9c, 0x36, 0x9e, 0x47, 0x59, 0x0d, 0xa8, 0x9e, 0xf8, 0x31, 0xc6, 0x25, 0xf8, 0x80 }) // unknown format code \'%c\' for object of type \'str\'
TRANSLATION("zero step", 10, { 0xfe, 0x0d, 0xd8, 0x44, 0x9e, 0x00 }) // zero step
TRANSLATION("__init__() should return None", 30, { 0xa5, 0x11, 0x52, 0x69, 0x4f, 0x67, 0xb4, 0x47, 0x36, 0xcd, 0xec, 0x1c, 0xe7, 0x2e, 0xa3, 0xc5, 0x94, 0xc0 }) // __init__() should return None
TRANSLATION("join expects a list of str/bytes objects consistent with self object", 69, { 0xf2, 0x64, 0x50, 0x7d, 0xb0, 0x75, 0x98, 0x04, 0x2e, 0x91, 0x21, 0xb5, 0x11, 0x2f, 0xef, 0xd3, 0xbc, 0x9c, 0x06, 0xd3, 0xc8, 0xeb, 0x30, 0x2a, 0xcb, 0x09, 0x12, 0x6b, 0x23, 0xaa, 0x4f, 0x31, 0x07, 0x7d, 0x43, 0x69, 0xe4, 0x75, 0x90 }) // join expects a list of str/bytes objects consistent with self object
TRANSLATION("unsupported format character '%c' (0x%x) at index %d", 53, { 0xca, 0xc6, 0x71, 0x86, 0x79, 0x3b, 0x0d, 0x59, 0xf7, 0x29, 0x15, 0xe6, 0x4e, 0x55, 0x93, 0x71, 0xc7, 0x85, 0x78, 0x8f, 0x67, 0xf3, 0xed, 0xc3, 0xb7, 0xb4, 0x14, 0x84, 0x5b, 0x1f, 0x61, 0xc2, 0xc0 }) // unsupported format character \'%c\' (0x%x) at index %d
TRANSLATION("Traceback (most recent call last):\n", 37, { 0xfb, 0xb9, 0x54, 0xf4, 0x2a, 0xf9, 0x8f, 0x66, 0xed, 0x12, 0x1c, 0xea, 0x6b, 0x22, 0xa5, 0x7b, 0x8b, 0x94, 0x4f, 0xb7, 0xf1, 0xf5, 0xfa, 0x80 }) // Traceback (most recent call last):\r\n
TRANSLATION("chr() arg not in range(0x110000)", 33, { 0xaf, 0x37, 0xf6, 0x7b, 0x41, 0x3e, 0xc1, 0x5a, 0x42, 0x28, 0x72, 0x5d, 0x8f, 0xd9, 0xfc, 0xfb, 0x7f, 0x4f, 0xe9, 0xfc, 0xff, 0x9f, 0xf3, 0xfe, 0x7e, 0xd0 }) // chr() arg not in range(0x110000)
TRANSLATION("wrong number of arguments", 26, { 0xea, 0xec, 0xbb, 0x05, 0xce, 0xfa, 0x1b, 0x86, 0xd4, 0x13, 0xed, 0x9d, 0xcd, 0x66, 0x00 }) // wrong number of arguments
TRANSLATION("invalid syntax", 15, { 0x45, 0xe8, 0x57, 0x4b, 0x08, 0xee, 0xb2, 0x5d, 0x80 }) // invalid syntax
TRANSLATION("%q indices must be integers, not %s", 36, { 0xe1, 0xe8, 0x11, 0x6c, 0x95, 0x38, 0x1b, 0xe6, 0x24, 0x68, 0x61, 0x16, 0x4f, 0x63, 0x78, 0xfc, 0x02, 0xb4, 0x8e, 0x10 }) // %q indices must be integers, not %s
TRANSLATION("keyword argument(s) not yet implemented - use normal args instead", 66, { 0xf3, 0x3e, 0xfd, 0x59, 0xec, 0x09, 0xf6, 0xce, 0xe6, 0xb3, 0xec, 0x8f, 0x68, 0x56, 0x91, 0xdc, 0xe4, 0x26, 0xf8, 0xb9, 0xee, 0x6b, 0x27, 0x61, 0xee, 0x19, 0x83, 0x0a, 0xcf, 0xb9, 0x5c, 0x13, 0xed, 0x01, 0x16, 0x24, 0xca, 0xc0 }) // keyword argument(s) not yet implemented - use normal args instead
TRANSLATION("invalid syntax for integer with base %d", 40, { 0x45, 0xe8, 0x57, 0x4b, 0x08, 0xee, 0xb2, 0x5d, 0x86, 0xac, 0xe1, 0x16, 0x4f, 0x63, 0x71, 0xd5, 0x27, 0x98, 0xd0, 0xa0, 0xc7, 0x0b, 0x00 }) // invalid syntax for integer with base %d
TRANSLATION("odd-length string", 18, { 0x6b, 0x5b, 0xdd, 0x73, 0x5d, 0xa7, 0x98, 0x89, 0x74, 0x5d, 0x80 }) // odd-length string
TRANSLATION("unsupported types for %q: '%s', '%s'", 37, { 0xca, 0xc6, 0x71, 0x86, 0x79, 0x3b, 0x09, 0xef, 0x83, 0x81, 0xab, 0x38, 0xe1, 0xe9, 0xf8, 0x8e, 0x3c, 0x23, 0x8f, 0xe0, 0x38, 0xf0, 0x8e, 0x20 }) // unsupported types for %q: \'%s\', \'%s\'
TRANSLATION("expecting just a value for set", 31, { 0x3e, 0xd8, 0x3a, 0xca, 0x2e, 0xc3, 0xcb, 0x31, 0x20, 0x87, 0x42, 0xbe, 0x4c, 0x6a, 0xce, 0x20, 0xe4 }) // expecting just a value for set
TRANSLATION("object has no len", 18, { 0x6d, 0x3c, 0x8e, 0xb2, 0x39, 0x94, 0x05, 0x61, 0x73, 0x50 }) // object has no len
TRANSLATION("exceptions must derive from BaseException", 42, { 0x3e, 0xd5, 0x3c, 0x4a, 0x32, 0xc0, 0xdf, 0x31, 0x22, 0xc6, 0xe9, 0xd0, 0xc6, 0xae, 0xdb, 0x8f, 0xc8, 0xa0, 0xf9, 0x76, 0xa9, 0xe2, 0x51, 0x94 }) // exceptions must derive from BaseException
TRANSLATION("first argument to super() must be type", 39, { 0xd5, 0x1e, 0x24, 0x13, 0xed, 0x9d, 0xcd, 0x64, 0x4b, 0x08, 0xce, 0x0d, 0xfd, 0x9e, 0xd1, 0xbe, 0x62, 0x46, 0x86, 0x27, 0xbe, 0x0c }) // first argument to super() must be type
TRANSLATION("can't convert %s to float", 26, { 0xa9, 0x2f, 0x19, 0x15, 0x65, 0xe8, 0x6f, 0x23, 0x84, 0x09, 0x61, 0xad, 0xd8, 0xa4 }) // can\'t convert %s to float
TRANSLATION("argument num/types mismatch", 28, { 0x27, 0xdb, 0x3b, 0x9a, 0xc8, 0x5c, 0xef, 0xef, 0x9e, 0xf8, 0x38, 0x1b, 0xa4, 0x6e, 0x53, 0x5e, 0x60 }) // argument num/types mismatch
TRANSLATION("pop from empty list", 20, { 0xc3, 0x60, 0x6a, 0xed, 0xb8, 0x3d, 0xf1, 0x3d, 0xc5, 0xd2, 0x24 }) // pop from empty list
TRANSLATION("__new__ arg must be a user-type", 32, { 0xa5, 0x14, 0xfa, 0xd2, 0x80, 0x9f, 0x61, 0xbe, 0x62, 0x46, 0x86, 0x08, 0x66, 0x0d, 0xfd, 0xd3, 0xdf, 0x06 }) // __new__ arg must be a user-type
TRANSLATION("can't convert NaN to int", 25, { 0xa9, 0x2f, 0x19, 0x15, 0x65, 0xe8, 0x6f, 0x23, 0xc4, 0xbc, 0x44, 0xb0, 0x45, 0x90 }) // can\'t convert NaN to int
TRANSLATION("can't have multiple **x", 24, { 0xa9, 0x2f, 0x19, 0x1c, 0xcb, 0xa1, 0x8d, 0xf3, 0x79, 0x4c, 0x5c, 0xc7, 0xf2, 0xfe, 0x5d, 0x80 }) // can\'t have multiple **x
TRANSLATION("pop from an empty set", 22, { 0xc3, 0x60, 0x6a, 0xed, 0xb8, 0x25, 0x07, 0xbe, 0x27, 0xb8, 0x83, 0x90 }) // pop from an empty set
TRANSLATION("object '%s' is not a tuple or list", 35, { 0x6d, 0x3c, 0x8e, 0xb2, 0x38, 0xf0, 0x8e, 0x21, 0x20, 0x2b, 0x48, 0x21, 0x39, 0xc5, 0xcc, 0x33, 0x8b, 0xa4, 0x48 }) // object \'%s\' is not a tuple or list
TRANSLATION("dict update sequence has wrong length", 38, { 0xb2, 0x56, 0x46, 0x71, 0x62, 0x93, 0x10, 0x7e, 0x99, 0x35, 0xa9, 0x8e, 0x65, 0x03, 0xab, 0xb2, 0xec, 0x2e, 0x6b, 0xb4, 0xf3 }) // dict update sequence has wrong length
TRANSLATION("object does not support item assignment", 40, { 0x6d, 0x3c, 0x8e, 0xb2, 0x2c, 0xc7, 0x01, 0x5a, 0x44, 0x67, 0x18, 0x67, 0x90, 0x92, 0x7b, 0x82, 0x88, 0x4d, 0x97, 0x73, 0x59 }) // object does not support item assignment
TRANSLATION("can't switch from automatic field numbering to manual field specification", 74, { 0xa9, 0x2f, 0x19, 0x11, 0xd5, 0x26, 0xbc, 0xc6, 0xae, 0xdb, 0x82, 0xcc, 0xb6, 0xe5, 0x29, 0x51, 0xaa, 0x1d, 0xec, 0x17, 0x3b, 0xe8, 0x6e, 0x8b, 0xb0, 0x96, 0x1b, 0x92, 0xe4, 0xae, 0x35, 0x43, 0xbd, 0x84, 0x60, 0xea, 0x9a, 0xa5, 0x4a, 0x51, 0x94 }) // can\'t switch from automatic field numbering to manual field specification
TRANSLATION("object not in sequence", 23, { 0x6d, 0x3c, 0x8e, 0xb2, 0x15, 0xa4, 0x22, 0x88, 0x3f, 0x4c, 0x9a, 0xd4, 0xc0 }) // object not in sequence
TRANSLATION("string not supported; use bytes or bytearray", 45, { 0x89, 0x74, 0x5d, 0x82, 0xb4, 0x88, 0xce, 0x30, 0xcf, 0x27, 0x6f, 0xff, 0xc3, 0x30, 0x63, 0x4e, 0xf2, 0x70, 0x19, 0xc6, 0x9d, 0xe4, 0xc9, 0xdc, 0xbb, 0x80 }) // string not supported; use bytes or bytearray
TRANSLATION("a bytes-like object is required", 32, { 0x21, 0xa7, 0x79, 0x38, 0xf7, 0x5d, 0x3c, 0xcc, 0x36, 0x9e, 0x47, 0x59, 0x09, 0x01, 0xcf, 0xd3, 0x28, 0xe7, 0x60 }) // a bytes-like object is required
TRANSLATION("non-hex digit found", 20, { 0x56, 0x5f, 0x77, 0x33, 0xec, 0x2c, 0x9b, 0x24, 0x8d, 0x5b, 0x2b, 0x60 }) // non-hex digit found
TRANSLATION("unindent does not match any outer indentation level", 52, { 0xca, 0xa2, 0xd8, 0xd6, 0x45, 0x98, 0xe0, 0x2b, 0x48, 0xdc, 0xa6, 0xbc, 0xc1, 0x2f, 0x70, 0xd9, 0x93, 0x70, 0x8b, 0x63, 0x59, 0x29, 0x46, 0x51, 0x73, 0xe8, 0x77 }) // unindent does not match any outer indentation level
TRANSLATION("'%s' object has no attribute '%q'", 34, { 0xe3, 0xc2, 0x38, 0x86, 0xd3, 0xc8, 0xeb, 0x23, 0x99, 0x40, 0x56, 0x05, 0x32, 0xe9, 0xa6, 0x64, 0xc7, 0x1e, 0x1e, 0x9c, 0x40 }) // \'%s\' object has no attribute \'%q\'
TRANSLATION("no such attribute", 18, { 0x56, 0x11, 0x9a, 0xf3, 0x05, 0x32, 0xe9, 0xa6, 0x64, 0xc0 }) // no such attribute
TRANSLATION("non-keyword arg after */**", 27, { 0x56, 0x5f, 0x77, 0x99, 0xf7, 0xea, 0xcf, 0x60, 0x4f, 0xb0, 0x2d, 0x64, 0xdc, 0x7f, 0x2f, 0x7f, 0xf2, 0xfe, 0x40 }) // non-keyword arg after */**
TRANSLATION("soft reboot\n", 14, { 0x86, 0xd6, 0x43, 0x9e, 0x8c, 0xd3, 0xeb, 0xf5, 0x00 }) // soft reboot\r\n
TRANSLATION("Length must be an int", 22, { 0xfd, 0x4d, 0x76, 0x9e, 0x63, 0x7c, 0xc4, 0x8d, 0x0c, 0x12, 0x84, 0x59 }) // Length must be an int
TRANSLATION("bytes value out of range", 25, { 0xd3, 0xbc, 0x9c, 0x0e, 0x85, 0x7c, 0x98, 0x6c, 0xc8, 0x6d, 0x43, 0x92, 0xec, 0x60 }) // bytes value out of range
TRANSLATION("Call super().__init__() before accessing native object.", 56, { 0xf8, 0x95, 0xee, 0x23, 0x38, 0x37, 0xf6, 0x7b, 0x7c, 0x29, 0x44, 0x54, 0x9a, 0x53, 0xd9, 0xed, 0x1a, 0x1e, 0xac, 0xe6, 0x0a, 0xb5, 0x38, 0x84, 0x5d, 0x82, 0x94, 0xa7, 0x43, 0x0d, 0xa7, 0x91, 0xd6, 0x7c, 0x00 }) // Call super().__init__() before accessing native object.
TRANSLATION("type is not an acceptable base type", 36, { 0x9e, 0xf8, 0x30, 0x90, 0x15, 0xa4, 0x12, 0x82, 0xad, 0x4f, 0x12, 0x5a, 0x5c, 0xc6, 0x85, 0x06, 0x27, 0xbe, 0x0c }) // type is not an acceptable base type
TRANSLATION("can't convert '%q' object to %q implicitly", 43, { 0xa9, 0x2f, 0x19, 0x15, 0x65, 0xe8, 0x6f, 0x23, 0x8f, 0x0f, 0x4e, 0x21, 0xb4, 0xf2, 0x3a, 0xc8, 0x96, 0x1c, 0x3d, 0x02, 0x6f, 0x8b, 0xa5, 0x52, 0x6f, 0xdc }) // can\'t convert \'%q\' object to %q implicitly
TRANSLATION("The CircuitPython heap was corrupted because the stack was too small.\nPlease increase stack size limits and press reset (after ejecting CIRCUITPY).\nIf you didn't change the stack, then file an issue here with the contents of your CIRCUITPY drive:\n", 251, { 0xfb, 0xf3, 0x31, 0xf1, 0x47, 0xae, 0x52, 0x7e, 0x9d, 0xe7, 0x9b, 0x28, 0xe6, 0x65, 0x81, 0xd4, 0xa0, 0x55, 0x9d, 0xf3, 0x89, 0x3b, 0x0d, 0x0e, 0xa5, 0x98, 0x31, 0x3c, 0xcc, 0x44, 0x95, 0x7c, 0xc7, 0x52, 0x81, 0x2c, 0xc2, 0x37, 0x2b, 0xdf, 0xc3, 0xd7, 0xea, 0xfa, 0x5c, 0xca, 0x0c, 0x22, 0xd5, 0xcc, 0xa0, 0xc4, 0x49, 0x57, 0xcc, 0x42, 0x7f, 0x06, 0x2e, 0x9b, 0xa4, 0xc0, 0x25, 0xb0, 0xc3, 0x9c, 0x40, 0x73, 0x83, 0x91, 0xec, 0x2d, 0x64, 0xdc, 0x1f, 0x91, 0xd6, 0x51, 0x76, 0x1f, 0x1f, 0x97, 0xd7, 0xe3, 0xfb, 0xfc, 0xbe, 0xff, 0x4f, 0xf3, 0xed, 0xf0, 0xf5, 0xfa, 0xbe, 0x5a, 0x8e, 0xed, 0x91, 0x64, 0xb2, 0xf1, 0x91, 0x5e, 0x64, 0xbb, 0x18, 0x9e, 0x66, 0x22, 0x4a, 0xbe, 0x7f, 0x80, 0x9e, 0x66, 0xa3, 0x54, 0xb9, 0x82, 0x50, 0x91, 0x19, 0x31, 0xcc, 0xdc, 0xc7, 0x54, 0x9e, 0x62, 0x79, 0x98, 0xab, 0x2c, 0x9a, 0xcc, 0x06, 0xd4, 0x77, 0x6c, 0xb8, 0xf8, 0xfc, 0xbe, 0xbf, 0x1f, 0xdf, 0xe5, 0xf7, 0xfa, 0x7f, 0x91, 0x67, 0x4e, 0x87, 0xf8, 0xfa, 0xfd, 0x40 }) // The CircuitPython heap was corrupted because the stack was too small.\r\nPlease increase stack size limits and press reset (after ejecting CIRCUITPY).\r\nIf you didn\'t change the stack, then file an issue here with the contents of your CIRCUITPY drive:\r\n
TRANSLATION("name not defined", 17, { 0x52, 0xdc, 0xc2, 0xb4, 0x8b, 0x1e, 0xa8, 0xa7, 0x60 }) // name not defined
TRANSLATION("negative shift count", 21, { 0x53, 0xd8, 0xa5, 0x3a, 0x18, 0x8e, 0x69, 0xac, 0x8a, 0xb6, 0x56, 0x40 }) // negative shift count
TRANSLATION("Invalid argument", 17, { 0xf9, 0x2f, 0x42, 0xba, 0x58, 0x13, 0xed, 0x9d, 0xcd, 0x64 }) // Invalid argument
TRANSLATION("Incompatible .mpy file. Please update all .mpy files. See http://adafru.it/mpy-update for more info.", 101, { 0xf9, 0x2d, 0x5b, 0x7c, 0x14, 0xa6, 0x97, 0x31, 0xe1, 0xbe, 0x3b, 0x8d, 0x52, 0xe7, 0xe0, 0x3e, 0x97, 0x32, 0x83, 0x19, 0xc5, 0x8a, 0x4c, 0x15, 0xee, 0x3c, 0x37, 0xc7, 0x71, 0xaa, 0x5c, 0xe3, 0xc0, 0x7d, 0x8c, 0xc7, 0x39, 0x9c, 0x7e, 0x3e, 0xff, 0x79, 0x58, 0xb5, 0x7c, 0xf8, 0x24, 0xfb, 0xf7, 0xc7, 0x7f, 0x76, 0x71, 0x62, 0x93, 0x1a, 0xb3, 0x8d, 0xd9, 0xcc, 0x22, 0xea, 0xde, 0x00 }) // Incompatible .mpy file. Please update all .mpy files. See http://adafru.it/mpy-update for more info.
TRANSLATION("invalid syntax for number", 26, { 0x45, 0xe8, 0x57, 0x4b, 0x08, 0xee, 0xb2, 0x5d, 0x86, 0xac, 0xe1, 0x73, 0xbe, 0x86, 0xe0 }) // invalid syntax for number
TRANSLATION("type takes 1 or 3 arguments", 28, { 0x9e, 0xf8, 0x31, 0x25, 0xe6, 0x70, 0x3f, 0xa0, 0x67, 0x1f, 0xf0, 0x09, 0xf6, 0xce, 0xe6, 0xb3, 0x00 }) // type takes 1 or 3 arguments
TRANSLATION("complex division by zero", 25, { 0xab, 0x6f, 0x8b, 0x9f, 0x61, 0x64, 0xe8, 0x90, 0x8c, 0xa3, 0x4e, 0xe3, 0xf8, 0x37, 0x60 }) // complex division by zero
TRANSLATION("length argument not allowed for this type", 42, { 0xb9, 0xae, 0xd3, 0xcc, 0x13, 0xed, 0x9d, 0xcd, 0x64, 0x2b, 0x48, 0x2b, 0xdd, 0xba, 0x9d, 0x86, 0xac, 0xe2, 0x79, 0xa4, 0x09, 0xef, 0x83 }) // length argument not allowed for this type
TRANSLATION(", in %q\n", 10, { 0xfc, 0x02, 0x28, 0xe1, 0xe9, 0xeb, 0xf5, 0x00 }) // , in %q\r\n
TRANSLATION("unknown format code '%c' for object of type 'float'", 52, { 0xca, 0xf9, 0xab, 0x75, 0x51, 0xab, 0x3e, 0xe5, 0x22, 0xad, 0x63, 0x1c, 0x78, 0x57, 0x88, 0xd5, 0x9c, 0x36, 0x9e, 0x47, 0x59, 0x0d, 0xa8, 0x9e, 0xf8, 0x31, 0xc7, 0x5b, 0xb1, 0x4f, 0x10 }) // unknown format code \'%c\' for object of type \'float\'
TRANSLATION("attributes not supported yet", 29, { 0x29, 0x97, 0x4d, 0x33, 0x27, 0x01, 0x5a, 0x44, 0x67, 0x18, 0x67, 0x93, 0xb0, 0xee, 0x72 }) // attributes not supported yet
TRANSLATION("slice step cannot be zero", 26, { 0x8b, 0xa5, 0x4c, 0x44, 0x9e, 0x05, 0x49, 0x55, 0xa4, 0x68, 0x63, 0xf8, 0x37, 0x60 }) // slice step cannot be zero
TRANSLATION("value must fit in %d byte(s)", 29, { 0xe8, 0x57, 0xc9, 0x8d, 0xf3, 0x12, 0x35, 0x49, 0x08, 0xa3, 0x85, 0x86, 0x9d, 0xe4, 0xfd, 0x91, 0xed }) // value must fit in %d byte(s)
TRANSLATION("Running in safe mode! Not running saved code.\n", 48, { 0xfa, 0xe5, 0x55, 0x17, 0x60, 0x8a, 0x20, 0xb5, 0x31, 0xbb, 0x58, 0xff, 0xd0, 0x78, 0xb4, 0x87, 0xca, 0xaa, 0x2e, 0xc2, 0x0b, 0xa1, 0xd8, 0x55, 0xac, 0x7e, 0x1e, 0xbf, 0x50 }) // Running in safe mode! Not running saved code.\r\n
TRANSLATION("can't convert inf to int", 25, { 0xa9, 0x2f, 0x19, 0x15, 0x65, 0xe8, 0x6f, 0x21, 0x17, 0x51, 0x2c, 0x11, 0x64 }) // can\'t convert inf to int
TRANSLATION("cannot create '%q' instances", 29, { 0xa9, 0x2a, 0xb4, 0x8a, 0xb9, 0x94, 0x98, 0xe3, 0xc3, 0xd3, 0x88, 0x45, 0x89, 0x25, 0xa9, 0xc0 }) // cannot create \'%q\' instances
TRANSLATION("issubclass() arg 2 must be a class or a tuple of classes", 57, { 0x48, 0x8c, 0xe9, 0x5b, 0x94, 0x47, 0xb3, 0xda, 0x09, 0xf6, 0x1f, 0xee, 0x37, 0xcc, 0x48, 0xd0, 0xc1, 0x0a, 0xdc, 0xa2, 0x03, 0x38, 0x21, 0x39, 0xc5, 0xcc, 0x36, 0xa2, 0xb7, 0x28, 0x83, 0x80 }) // issubclass() arg 2 must be a class or a tuple of classes
TRANSLATION("No such file/directory", 23, { 0xf1, 0x61, 0x19, 0xaf, 0x31, 0xaa, 0x5c, 0xfd, 0xf6, 0x47, 0x3a, 0xcb, 0x3f, 0x70 }) // No such file/directory
TRANSLATION("3-arg pow() not supported", 26, { 0xff, 0x8f, 0x71, 0x3e, 0xc3, 0x0d, 0xd7, 0xd9, 0xed, 0x0a, 0xd2, 0x23, 0x38, 0xc3, 0x3c, 0x9d, 0x80 }) // 3-arg pow() not supported
TRANSLATION("ord expects a character", 24, { 0x67, 0xb0, 0x3e, 0xd8, 0x3a, 0xcc, 0x02, 0x15, 0xe6, 0x4e, 0x55, 0x93, 0x70 }) // ord expects a character
TRANSLATION("object of type '%s' has no len()", 33, { 0x6d, 0x3c, 0x8e, 0xb2, 0x1b, 0x51, 0x3d, 0xf0, 0x63, 0x8f, 0x08, 0xe2, 0x39, 0x94, 0x05, 0x61, 0x73, 0x5f, 0x67, 0xb4 }) // object of type \'%s\' has no len()
TRANSLATION("'%s' object is not iterable", 28, { 0xe3, 0xc2, 0x38, 0x86, 0xd3, 0xc8, 0xeb, 0x21, 0x20, 0x2b, 0x48, 0x49, 0x37, 0x2d, 0x2e, 0x60 }) // \'%s\' object is not iterable
TRANSLATION("rsplit(None,n)", 15, { 0x78, 0xc5, 0xd2, 0x7d, 0x9e, 0x2c, 0xa7, 0xf8, 0x2f, 0xb4 }) // rsplit(None,n)
TRANSLATION("WARNING: Your code filename has two extensions\n", 49, { 0xff, 0xbf, 0x87, 0xd7, 0xc7, 0xe5, 0xe3, 0xfd, 0xff, 0x11, 0xfe, 0x5b, 0x2e, 0x2a, 0xd6, 0x31, 0xaa, 0x5c, 0xd4, 0xb7, 0x31, 0xcc, 0xa0, 0x4f, 0x56, 0x07, 0xda, 0x4d, 0x61, 0x19, 0x63, 0xd7, 0xea }) // WARNING: Your code filename has two extensions\r\n
TRANSLATION("maximum recursion depth exceeded", 33, { 0xdc, 0xbb, 0x26, 0xf9, 0xdc, 0x39, 0xd7, 0x2f, 0x08, 0xca, 0x2c, 0x78, 0x9e, 0x60, 0xfb, 0x54, 0xce, 0xc7, 0x60 }) // maximum recursion depth exceeded
TRANSLATION("argument should be a '%q' not a '%q'", 37, { 0x27, 0xdb, 0x3b, 0x9a, 0xc8, 0x8e, 0x6d, 0x9b, 0xd8, 0x68, 0x60, 0x87, 0x1e, 0x1e, 0x9c, 0x42, 0xb4, 0x82, 0x1c, 0x78, 0x7a, 0x71 }) // argument should be a \'%q\' not a \'%q\'
TRANSLATION("expected tuple/list", 20, { 0x3e, 0xd8, 0x3a, 0xc9, 0xd8, 0x4e, 0x71, 0x73, 0xf7, 0xdd, 0x22, 0x40 }) // expected tuple/list
TRANSLATION("syntax error in JSON", 21, { 0x8e, 0xeb, 0x25, 0xd8, 0x1b, 0xbb, 0x38, 0x45, 0x1f, 0xfe, 0x7d, 0xbe, 0x7e, 0x20 }) // syntax error in JSON
TRANSLATION("wrong number of values to unpack", 33, { 0xea, 0xec, 0xbb, 0x05, 0xce, 0xfa, 0x1b, 0x86, 0xd4, 0x74, 0x2b, 0xe4, 0xe0, 0x4b, 0x0c, 0xae, 0x0a, 0xbe, 0x60 }) // wrong number of values to unpack
TRANSLATION("extra keyword arguments given", 30, { 0x3e, 0xd2, 0xe4, 0x3c, 0xcf, 0xbf, 0x56, 0x7b, 0x02, 0x7d, 0xb3, 0xb9, 0xac, 0xc0, 0xd9, 0x3a, 0x1a, 0x80 }) // extra keyword arguments given
TRANSLATION("Unable to init parser", 22, { 0xfd, 0xd4, 0xb4, 0xb9, 0x89, 0x60, 0x8a, 0x92, 0x30, 0x4f, 0x06, 0xe0 }) // Unable to init parser
TRANSLATION("identifier redefined as nonlocal", 33, { 0x4b, 0x1a, 0xca, 0x6a, 0x86, 0xe1, 0xce, 0xc7, 0xaa, 0x29, 0xd8, 0x14, 0x05, 0x65, 0xbb, 0x54, 0xae }) // identifier redefined as nonlocal
TRANSLATION("must use keyword argument for key function", 43, { 0xdf, 0x31, 0x23, 0x30, 0x63, 0xcc, 0xfb, 0xf5, 0x67, 0xb0, 0x27, 0xdb, 0x3b, 0x9a, 0xc8, 0xd5, 0x9c, 0x79, 0x9f, 0x71, 0xae, 0x56, 0xb2, 0x8c, 0xa0 }) // must use keyword argument for key function
TRANSLATION(" output:\n", 11, { 0x0d, 0x99, 0xc6, 0x67, 0xf1, 0xf5, 0xfa, 0x80 }) //  output:\r\n
TRANSLATION("name '%q' is not defined", 25, { 0x52, 0xdc, 0xc7, 0x1e, 0x1e, 0x9c, 0x42, 0x40, 0x56, 0x91, 0x63, 0xd5, 0x14, 0xec }) // name \'%q\' is not defined
TRANSLATION("non-default argument follows default argument", 46, { 0x56, 0x5f, 0x75, 0x8f, 0x52, 0xcd, 0xe4, 0x13, 0xed, 0x9d, 0xcd, 0x64, 0x6a, 0xd7, 0xbb, 0x75, 0x81, 0x63, 0xd4, 0xb3, 0x79, 0x04, 0xfb, 0x67, 0x73, 0x59 }) // non-default argument follows default argument
TRANSLATION("can't convert %s to int", 24, { 0xa9, 0x2f, 0x19, 0x15, 0x65, 0xe8, 0x6f, 0x23, 0x84, 0x09, 0x60, 0x8b, 0x20 }) // can\'t convert %s to int
TRANSLATION("object not iterable", 20, { 0x6d, 0x3c, 0x8e, 0xb2, 0x15, 0xa4, 0x24, 0x9b, 0x96, 0x97, 0x30 }) // object not iterable
TRANSLATION("Looks like our core CircuitPython code crashed hard. Whoops!\nPlease file an issue at https://github.com/adafruit/circuitpython/issues\n with the contents of your CIRCUITPY drive and this message:\n", 199, { 0xfd, 0x59, 0xbc, 0xe0, 0x5d, 0x3c, 0xcc, 0x36, 0x5c, 0x55, 0x9c, 0xc7, 0xc5, 0x1e, 0xb9, 0x49, 0xfa, 0x77, 0x9e, 0x6c, 0xa2, 0xad, 0x63, 0x15, 0x72, 0x8e, 0x67, 0x61, 0xcc, 0x9e, 0xde, 0x03, 0xfe, 0xf9, 0xb3, 0x62, 0x3f, 0xd3, 0xd7, 0xea, 0xfa, 0x5c, 0xca, 0x0c, 0x6a, 0x97, 0x30, 0x4a, 0x12, 0x23, 0x26, 0x0a, 0x47, 0x39, 0x9c, 0x47, 0xe3, 0xef, 0xf7, 0xec, 0x93, 0xcf, 0x3a, 0x78, 0x55, 0xb7, 0xf7, 0x95, 0x8b, 0x57, 0xca, 0x4f, 0xbe, 0xa8, 0xf5, 0xca, 0x4e, 0x3b, 0xcf, 0x36, 0x5f, 0x7a, 0x44, 0x64, 0xe3, 0xd7, 0xea, 0x1d, 0x52, 0x79, 0x89, 0xe6, 0x62, 0xac, 0xb2, 0x6b, 0x30, 0x1b, 0x51, 0xdd, 0xb2, 0xe3, 0xe3, 0xf2, 0xfa, 0xfc, 0x7f, 0x7f, 0x97, 0xdf, 0xe9, 0xfe, 0x45, 0x9d, 0x3a, 0x18, 0x25, 0xb0, 0x9e, 0x69, 0x03, 0x73, 0x88, 0x2d, 0x8f, 0xf1, 0xf5, 0xfa, 0x80 }) // Looks like our core CircuitPython code crashed hard. Whoops!\r\nPlease file an issue at https://github.com/adafruit/circuitpython/issues\r\n with the contents of your CIRCUITPY drive and this message:\r\n
TRANSLATION("can't do truncated division of a complex number", 48, { 0xa9, 0x2f, 0x19, 0x16, 0x61, 0x2f, 0x95, 0xa9, 0x49, 0xd8, 0x59, 0x3a, 0x24, 0x23, 0x28, 0x6d, 0x41, 0x0a, 0xb6, 0xf8, 0xb9, 0xf6, 0x0b, 0x9d, 0xf4, 0x37 }) // can\'t do truncated division of a complex number
TRANSLATION("expected ':' after format specifier", 36, { 0x3e, 0xd8, 0x3a, 0xc9, 0xd8, 0x71, 0xfc, 0x78, 0x82, 0xd6, 0x4d, 0xc6, 0xac, 0xfb, 0x94, 0x88, 0xc1, 0xd5, 0x35, 0x43, 0x70 }) // expected \':\' after format specifier
TRANSLATION("no active exception to reraise", 31, { 0x56, 0x05, 0x59, 0x4e, 0x86, 0x0f, 0xb5, 0x4f, 0x12, 0x8c, 0xa2, 0x58, 0x39, 0xb9, 0x24, 0x18 }) // no active exception to reraise
TRANSLATION("'yield' outside function", 25, { 0xe3, 0xdd, 0x0e, 0xf6, 0xe2, 0x1b, 0x33, 0x09, 0x63, 0x1a, 0xe5, 0x6b, 0x28, 0xca }) // \'yield\' outside function
TRANSLATION("sign not allowed with integer format specifier 'c'", 51, { 0x84, 0xd9, 0x42, 0xb4, 0x82, 0xbd, 0xdb, 0xa9, 0xd8, 0x75, 0x49, 0xe6, 0x11, 0x64, 0xf6, 0x37, 0x1a, 0xb3, 0xee, 0x52, 0x23, 0x07, 0x54, 0xd5, 0x0d, 0xc7, 0x1a, 0xf1 }) // sign not allowed with integer format specifier \'c\'
TRANSLATION("string indices must be integers, not %s", 40, { 0x89, 0x74, 0x5d, 0x82, 0x2d, 0x92, 0xa7, 0x03, 0x7c, 0xc4, 0x8d, 0x0c, 0x22, 0xc9, 0xec, 0x6f, 0x1f, 0x80, 0x56, 0x91, 0xc2, 0x00 }) // string indices must be integers, not %s
TRANSLATION("tuple index out of range", 25, { 0x9c, 0xe2, 0xe6, 0x11, 0x6c, 0x7d, 0x83, 0x66, 0x43, 0x6a, 0x1c, 0x97, 0x63 }) // tuple index out of range
TRANSLATION("Buffer incorrect size. Should be %d bytes.", 43, { 0xfc, 0xb3, 0xae, 0xa6, 0xe1, 0x16, 0xac, 0xee, 0x75, 0x91, 0x09, 0xfc, 0x1f, 0x80, 0xfb, 0x73, 0x6c, 0xde, 0xc3, 0x43, 0x1c, 0x2c, 0x34, 0xef, 0x27, 0x1e, 0x00 }) // Buffer incorrect size. Should be %d bytes.
TRANSLATION("LHS of keyword arg must be an id", 33, { 0xfd, 0x7f, 0xeb, 0xec, 0x1b, 0x51, 0xe6, 0x7d, 0xfa, 0xb3, 0xd8, 0x13, 0xec, 0x37, 0xcc, 0x48, 0xd0, 0xc1, 0x28, 0x4b, 0x00 }) // LHS of keyword arg must be an id
TRANSLATION("no module named '%q'", 21, { 0x56, 0x1b, 0xb5, 0xb3, 0x73, 0x0a, 0x5b, 0x9d, 0x87, 0x1e, 0x1e, 0x9c, 0x40 }) // no module named \'%q\'

// 2918 bytes worth of qstr
// 8356 bytes worth of translations
// 5031 bytes worth of translations compressed
// 3325 bytes saved
